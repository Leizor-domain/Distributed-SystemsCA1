/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package distsys.smarthome3;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.stub.StreamObserver;
import java.awt.event.ActionEvent;
import javax.swing.*;
import smarthome.climate.Climate.*;
import smarthome.climate.ClimateServiceGrpc;
import smarthome.common.Common.*;
import smarthome.lighting.Lighting.*;
import smarthome.lighting.LightingServiceGrpc;
import smarthome.security.Security.*;
import smarthome.security.SecurityServiceGrpc;

/**
 *
 * @author macbookm2chip
 */
public class SmartHomeGui extends javax.swing.JFrame {
    
     private ManagedChannel channel;
    private ClimateServiceGrpc.ClimateServiceBlockingStub climateStub;
    private ClimateServiceGrpc.ClimateServiceStub climateAsync;
    private LightingServiceGrpc.LightingServiceBlockingStub lightingStub;
    private LightingServiceGrpc.LightingServiceStub lightingAsync;
    private SecurityServiceGrpc.SecurityServiceBlockingStub securityStub;
    private SecurityServiceGrpc.SecurityServiceStub securityAsync;
    private java.util.List<LightControlCommand> batchCommands = new java.util.ArrayList<>();
    private StreamObserver<CameraFrame> cameraStreamObserver;
    private io.grpc.Context.CancellableContext cameraContext;

    // Create an authentication object containing API key and device ID
    // This auth token is required for all service requests to validate the client identity
    private Auth auth = Auth.newBuilder()
            .setApiKey("valid-api-key")           // Set the predefined API key for secure access
            .setDeviceId("device-thermo-1")       // Assign a unique device ID (e.g., thermostat device)
            .build();                             // Build the Auth object used in all service requests

   

    /**
     * Creates new form SmartHomeGui
     */
    public SmartHomeGui() {
        initComponents();
        initGrpcClient();
    }
    
    private void initGrpcClient() {
        // Create a gRPC channel to connect to the server at localhost:50051
        // Plaintext is used here (no TLS/SSL) for local development and testing
        channel = ManagedChannelBuilder.forAddress("localhost", 50051)
            .usePlaintext()
            .build();

        // Initialize blocking stub for ClimateService - used for synchronous (unary) calls
        climateStub = ClimateServiceGrpc.newBlockingStub(channel);
    
        // Initialize async stub for ClimateService - used for streaming or asynchronous calls
        climateAsync = ClimateServiceGrpc.newStub(channel);
    
        // Initialize blocking stub for LightingService
        lightingStub = LightingServiceGrpc.newBlockingStub(channel);

        // Initialize async stub for LightingService
        lightingAsync = LightingServiceGrpc.newStub(channel);

        // Initialize blocking stub for SecurityService
        securityStub = SecurityServiceGrpc.newBlockingStub(channel);

        // Initialize async stub for SecurityService
        securityAsync = SecurityServiceGrpc.newStub(channel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lightCommandGroup = new javax.swing.ButtonGroup();
        Climate = new javax.swing.JInternalFrame();
        jLabel2 = new javax.swing.JLabel();
        btnSetTemp = new javax.swing.JButton();
        btnAdjustUp = new javax.swing.JButton();
        btnAdjustDown = new javax.swing.JButton();
        txtTargetTemp = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtClimateLog = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        Lighting = new javax.swing.JInternalFrame();
        Brightness = new javax.swing.JLabel();
        sliderBrightness = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        rdoToggleOn = new javax.swing.JRadioButton();
        rdoToggleOff = new javax.swing.JRadioButton();
        rdoSetBrightness = new javax.swing.JRadioButton();
        btnAddToBatch = new javax.swing.JButton();
        btnSendBatch = new javax.swing.JButton();
        txtBatchBrightness = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnSetBrightness = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtBatchLog = new javax.swing.JTextArea();
        Security = new javax.swing.JInternalFrame();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtSecurityLog = new javax.swing.JTextArea();
        btnLock = new javax.swing.JButton();
        btnUnlock = new javax.swing.JButton();
        btnStartCamera = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        btnStopCamera = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Climate.setVisible(true);

        jLabel2.setText("Target Temp:");

        btnSetTemp.setText("Set Temperature");
        btnSetTemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetTempActionPerformed(evt);
            }
        });

        btnAdjustUp.setText("Adjust +");
        btnAdjustUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdjustUpActionPerformed(evt);
            }
        });

        btnAdjustDown.setText("Adjust -");
        btnAdjustDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdjustDownActionPerformed(evt);
            }
        });

        txtTargetTemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTargetTempActionPerformed(evt);
            }
        });

        txtClimateLog.setColumns(20);
        txtClimateLog.setRows(5);
        jScrollPane1.setViewportView(txtClimateLog);

        jLabel4.setText("Smart Climate");

        javax.swing.GroupLayout ClimateLayout = new javax.swing.GroupLayout(Climate.getContentPane());
        Climate.getContentPane().setLayout(ClimateLayout);
        ClimateLayout.setHorizontalGroup(
            ClimateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClimateLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ClimateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ClimateLayout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(ClimateLayout.createSequentialGroup()
                        .addGroup(ClimateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(ClimateLayout.createSequentialGroup()
                                .addComponent(btnAdjustUp)
                                .addGap(110, 110, 110))
                            .addGroup(ClimateLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(ClimateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtTargetTemp, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ClimateLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel4)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(btnAdjustDown)
                        .addGap(28, 28, 28))))
            .addGroup(ClimateLayout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(btnSetTemp)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ClimateLayout.setVerticalGroup(
            ClimateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClimateLayout.createSequentialGroup()
                .addComponent(jLabel4)
                .addGap(30, 30, 30)
                .addGroup(ClimateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtTargetTemp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnSetTemp)
                .addGap(29, 29, 29)
                .addGroup(ClimateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdjustUp)
                    .addComponent(btnAdjustDown))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        Lighting.setVisible(true);

        Brightness.setText("Brightness:");

        jLabel5.setText("Smart Lighting");

        lightCommandGroup.add(rdoToggleOn);
        rdoToggleOn.setText("Light ON");
        rdoToggleOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoToggleOnActionPerformed(evt);
            }
        });

        lightCommandGroup.add(rdoToggleOff);
        rdoToggleOff.setText("Light Off");
        rdoToggleOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoToggleOffActionPerformed(evt);
            }
        });

        lightCommandGroup.add(rdoSetBrightness);
        rdoSetBrightness.setText("Brightness On");
        rdoSetBrightness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoSetBrightnessActionPerformed(evt);
            }
        });

        btnAddToBatch.setText("Add to Batch");
        btnAddToBatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToBatchActionPerformed(evt);
            }
        });

        btnSendBatch.setText("Send Batch");
        btnSendBatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendBatchActionPerformed(evt);
            }
        });

        txtBatchBrightness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBatchBrightnessActionPerformed(evt);
            }
        });

        jLabel3.setText("Batch Brightness");

        btnSetBrightness.setText("Set Brightness");
        btnSetBrightness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetBrightnessActionPerformed(evt);
            }
        });

        txtBatchLog.setColumns(20);
        txtBatchLog.setRows(5);
        jScrollPane2.setViewportView(txtBatchLog);

        javax.swing.GroupLayout LightingLayout = new javax.swing.GroupLayout(Lighting.getContentPane());
        Lighting.getContentPane().setLayout(LightingLayout);
        LightingLayout.setHorizontalGroup(
            LightingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LightingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LightingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LightingLayout.createSequentialGroup()
                        .addComponent(txtBatchBrightness, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3))
                    .addComponent(rdoToggleOn)
                    .addComponent(jLabel5)
                    .addComponent(rdoToggleOff)
                    .addComponent(rdoSetBrightness)
                    .addComponent(btnSetBrightness)
                    .addGroup(LightingLayout.createSequentialGroup()
                        .addComponent(btnAddToBatch)
                        .addGap(71, 71, 71)
                        .addComponent(btnSendBatch))
                    .addGroup(LightingLayout.createSequentialGroup()
                        .addComponent(Brightness)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sliderBrightness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        LightingLayout.setVerticalGroup(
            LightingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LightingLayout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoToggleOn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoToggleOff)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoSetBrightness)
                .addGap(18, 18, 18)
                .addGroup(LightingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Brightness)
                    .addComponent(sliderBrightness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSetBrightness)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(LightingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBatchBrightness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(LightingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSendBatch)
                    .addComponent(btnAddToBatch))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        Security.setVisible(true);

        txtSecurityLog.setColumns(20);
        txtSecurityLog.setRows(5);
        jScrollPane3.setViewportView(txtSecurityLog);

        btnLock.setText("Lock Door");
        btnLock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLockActionPerformed(evt);
            }
        });

        btnUnlock.setText("Unlock Door");
        btnUnlock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnlockActionPerformed(evt);
            }
        });

        btnStartCamera.setText("Start Camera Feed");
        btnStartCamera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartCameraActionPerformed(evt);
            }
        });

        jLabel6.setText("Smart Security");

        btnStopCamera.setText("Stop Camera Feed");
        btnStopCamera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopCameraActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SecurityLayout = new javax.swing.GroupLayout(Security.getContentPane());
        Security.getContentPane().setLayout(SecurityLayout);
        SecurityLayout.setHorizontalGroup(
            SecurityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SecurityLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(SecurityLayout.createSequentialGroup()
                .addGroup(SecurityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SecurityLayout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(jLabel6))
                    .addGroup(SecurityLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(SecurityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnLock)
                            .addComponent(btnUnlock))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SecurityLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(SecurityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnStopCamera)
                    .addComponent(btnStartCamera))
                .addGap(17, 17, 17))
        );
        SecurityLayout.setVerticalGroup(
            SecurityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SecurityLayout.createSequentialGroup()
                .addComponent(jLabel6)
                .addGap(13, 13, 13)
                .addComponent(btnLock)
                .addGap(18, 18, 18)
                .addComponent(btnUnlock)
                .addGap(54, 54, 54)
                .addComponent(btnStartCamera)
                .addGap(18, 18, 18)
                .addComponent(btnStopCamera)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel1.setText("Welcome Home");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Climate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(Lighting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addComponent(Security, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Climate)
                    .addComponent(Security)
                    .addComponent(Lighting))
                .addGap(0, 14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAdjustUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdjustUpActionPerformed
        // TODO add your handling code here:
        adjustTemperature(1.0f);
    }//GEN-LAST:event_btnAdjustUpActionPerformed

    private void btnAdjustDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdjustDownActionPerformed
        // TODO add your handling code here:
        adjustTemperature(-1.0f);
    }//GEN-LAST:event_btnAdjustDownActionPerformed
// Helper function for both buttons (Adjust brightness up and down)
/**
 * Sends a bi-directional streaming request to adjust the temperature.
 * This method sends a single temperature delta and receives an updated
 * target temperature acknowledgment from the SmartClimate service.
 * the change in temperature to apply (positive or negative)
 */
    private void adjustTemperature(final float delta) {
    // Define how to handle the server's response stream
    StreamObserver<TemperatureAdjustmentAck> responseObserver = new StreamObserver<TemperatureAdjustmentAck>() {

        // Called when the server sends a new message (acknowledgment)
        @Override
        public void onNext(final TemperatureAdjustmentAck ack) {
            // Ensure GUI updates happen on the Event Dispatch Thread
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    // Append the updated target temperature to the log area
                    txtClimateLog.append(" Target Temp: " + ack.getTargetTemperature() + "\n");
                }
            });
        }

        // Called when an error occurs in the streaming communication
        @Override
        public void onError(final Throwable t) {
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    // Log the error message in the climate log
                    txtClimateLog.append(" Adjust error: " + t.getMessage() + "\n");
                }
            });
        }

        // Called when the server completes sending responses
        @Override
        public void onCompleted() {
            // No specific action needed on completion
        }
    };

    // Create a request stream to send messages to the server
    StreamObserver<TemperatureAdjustment> requestObserver = climateAsync.adjustTemperature(responseObserver);

    // Build the temperature adjustment request message
    TemperatureAdjustment adjustment = TemperatureAdjustment.newBuilder()
            .setAuth(auth) // Set authentication (API key and device ID)
            .setDevice(Device.newBuilder().setId(auth.getDeviceId()).build()) // Target device
            .setTemperatureDelta(delta) // Amount to adjust temperature
            .build();

    // Send the request to the server
    requestObserver.onNext(adjustment);

    // Signal the end of request stream (since it's a single message in this case)
    requestObserver.onCompleted();
}
    
    private void txtTargetTempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTargetTempActionPerformed
        // TODO add your handling code here:
        btnSetTempActionPerformed(evt);
    }//GEN-LAST:event_txtTargetTempActionPerformed

    private void btnSetTempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetTempActionPerformed
        // TODO add your handling code here:
       try {
            // Parse the value from the Target Temperature input field
            float target = Float.parseFloat(txtTargetTemp.getText());

            // Build the SetTemperatureRequest message with the user-defined temperature
            SetTemperatureRequest request = SetTemperatureRequest.newBuilder()
                .setAuth(auth) // Add authentication (API key and device ID)
                .setTemperature(target) // Set the desired temperature
                .build();

            // Make a unary gRPC call to the server to set the temperature
            StatusResponse response = climateStub.setTemperature(request);

            // Log the successful temperature setting response to the climate log area
            txtClimateLog.append(" Temp Set: " + response.getMessage() + "\n");

        } catch (NumberFormatException ex) {
            // If the input cannot be parsed into a float, notify the user
            txtClimateLog.append(" Invalid temperature input\n");
        }
    }//GEN-LAST:event_btnSetTempActionPerformed

    private void btnLockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLockActionPerformed
        // TODO add your handling code here:
        try {
            // Build the LockRequest message including authentication and target device ID
            LockRequest request = LockRequest.newBuilder()
                .setAuth(auth) // Add API key and device ID for authentication
                .setDevice(Device.newBuilder().setId("device-door-1").build()) // Specify the door device to lock
                .build();

            // Make a unary gRPC call to the server to lock the specified door
            StatusResponse response = securityStub.lockDoor(request);

            // Append the server's response to the security log in the GUI
            txtSecurityLog.append(" Door locked: " + response.getMessage() + "\n");

        } catch (Exception e) {
            // Catch and display any errors that occur during the lock request
            txtSecurityLog.append(" Lock error: " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_btnLockActionPerformed

    private void btnUnlockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnlockActionPerformed
        // TODO add your handling code here:
        try {
            // Build the UnlockRequest message with authentication and device info
            LockRequest request = LockRequest.newBuilder()
                .setAuth(auth) // Pass the API key and device ID for security validation
                .setDevice(Device.newBuilder().setId("device-door-1").build()) // Specify which door to unlock
                .build();

            // Send a unary gRPC request to the server to unlock the door
            StatusResponse response = securityStub.unlockDoor(request);

            // Display the result of the operation in the GUI's security log area
            txtSecurityLog.append(" Door unlocked: " + response.getMessage() + "\n");

        } catch (Exception e) {
            // If an exception occurs (e.g., server not reachable), log the error
            txtSecurityLog.append(" Unlock error: " + e.getMessage() + "\n");
        }
    }//GEN-LAST:event_btnUnlockActionPerformed

    private void btnStartCameraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartCameraActionPerformed
        // Create the request object with authentication and camera details
        CameraRequest request = CameraRequest.newBuilder()
            .setAuth(auth) // Attach the API key and device ID for verification
            .setCameraId("camera-1") // Specify the camera to stream from
            .setFrameRate(1) // Set how many frames per second to receive
            .build();

        // Prepare a cancellable gRPC context to allow stopping the stream later
        cameraContext = io.grpc.Context.current().withCancellation();

        // Run the stream inside the context
        cameraContext.run(new Runnable() {
            public void run() {
                // Define how to handle incoming CameraFrame messages from the server
                cameraStreamObserver = new StreamObserver<CameraFrame>() {
                    int count = 0; // Counter to track how many frames were received

                    @Override
                    public void onNext(final CameraFrame frame) {
                        // Append the received frame info to the security log (on the UI thread)
                        SwingUtilities.invokeLater(new Runnable() {
                            public void run() {
                                txtSecurityLog.append(" Frame received at " + frame.getTimestamp() + "\n");
                            }
                        });
                        count++;
                    }

                    @Override
                    public void onError(final Throwable t) {
                        // If an error occurs during the stream, show it in the GUI log
                        SwingUtilities.invokeLater(new Runnable() {
                            public void run() {
                                txtSecurityLog.append(" Camera error: " + t.getMessage() + "\n");
                            }
                        });
                    }

                    @Override
                    public void onCompleted() {
                        // When the stream ends, show confirmation in the GUI log
                        SwingUtilities.invokeLater(new Runnable() {
                            public void run() {
                                txtSecurityLog.append(" Camera stream ended.\n");
                            }
                        });
                    }
                };

                // Start the camera feed stream using the prepared request and observer
                securityAsync.streamCameraFeed(request, cameraStreamObserver);
            }
        });
    }//GEN-LAST:event_btnStartCameraActionPerformed

    private void rdoSetBrightnessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoSetBrightnessActionPerformed
        // TODO add your handling code here:
        // Enable the brightness input field so the user can type in a value
        txtBatchBrightness.setEnabled(true);
        // Automatically place the cursor/focus inside the brightness input field for immediate typing
        txtBatchBrightness.requestFocus();
        
    }//GEN-LAST:event_rdoSetBrightnessActionPerformed

    private void rdoToggleOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoToggleOffActionPerformed
        // TODO add your handling code here:
        // Disable the brightness input field to prevent input when it's not required
        txtBatchBrightness.setEnabled(false);
    }//GEN-LAST:event_rdoToggleOffActionPerformed

    private void rdoToggleOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoToggleOnActionPerformed
        // TODO add your handling code here:
        // Disable the brightness text field when brightness is not the selected command
        txtBatchBrightness.setEnabled(false);
    }//GEN-LAST:event_rdoToggleOnActionPerformed

    private void btnSendBatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendBatchActionPerformed
        // Check if there are any commands in the batch to send
        if (batchCommands.isEmpty()) {
            txtBatchLog.append(" No commands to send.\n");  // Log message if no commands exist
            return;  // Exit the method early
        }

        // Create a response observer to handle server responses for each command sent
        StreamObserver<StatusResponse> responseObserver = new StreamObserver<StatusResponse>() {
            // Called when a response is received for a command
            public void onNext(StatusResponse res) {
                txtBatchLog.append(" Server Response: " + res.getMessage() + "\n");
            }

            // Called if there's an error during the streaming process
            public void onError(Throwable t) {
                txtBatchLog.append(" Error: " + t.getMessage() + "\n");
            }

            // Called once all responses have been received and the stream is completed
            public void onCompleted() {
                txtBatchLog.append(" Batch sent and stream closed.\n");  // Log final confirmation
                batchCommands.clear();  // Clear the list of commands after successful send
            }
        };

        // Create a request stream to send the commands to the lighting service
        StreamObserver<LightControlCommand> requestObserver = lightingAsync.batchLightControl(responseObserver);

        // Send each command in the batch to the server
        for (LightControlCommand cmd : batchCommands) {
            requestObserver.onNext(cmd);  // Stream each command to the server
        }

        // After sending all commands, mark the stream as complete
        requestObserver.onCompleted();
    }//GEN-LAST:event_btnSendBatchActionPerformed

    private void btnAddToBatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToBatchActionPerformed
        // Create a new device object with a unique ID for the lighting device
        Device device = Device.newBuilder().setId("device-light-1").build();

        // Begin building a LightControlCommand, attaching authentication and device info
        LightControlCommand.Builder cmdBuilder = LightControlCommand.newBuilder()
            .setAuth(auth) // Add authentication credentials
            .setDevice(device); // Associate the command with the target device

        // Check which radio button option was selected for the lighting command

        if (rdoToggleOn.isSelected()) {
            // If "Toggle ON" is selected, set the toggle flag to true
            cmdBuilder.setToggle(true);
            txtBatchLog.append(" Queued: Toggle ON\n"); // Log the queued action
        } 
        else if (rdoToggleOff.isSelected()) {
            // If "Toggle OFF" is selected, set the toggle flag to false
            cmdBuilder.setToggle(false);
            txtBatchLog.append(" Queued: Toggle OFF\n"); // Log the queued action
        } 
        else if (rdoSetBrightness.isSelected()) {
            // If "Set Brightness" is selected, attempt to parse the brightness value
            try {
                int brightness = Integer.parseInt(txtBatchBrightness.getText());

                // Ensure brightness is within valid range (0–100)
                if (brightness < 0 || brightness > 100) throw new NumberFormatException();

                // Set the brightness value in the command
                cmdBuilder.setSetBrightness(brightness);
                txtBatchLog.append(" Queued: Brightness " + brightness + "%\n"); // Log the queued brightness
            } catch (NumberFormatException e) {
                // If input is not a valid number or out of bounds, log an error and exit method
                txtBatchLog.append(" Invalid brightness value\n");
                return;
            }
        } 
        else {
            // If no option was selected, notify the user and exit
            txtBatchLog.append(" No command selected\n");
            return;
        }

        // Add the fully constructed command to the batchCommands list for later sending
        batchCommands.add(cmdBuilder.build());
    }//GEN-LAST:event_btnAddToBatchActionPerformed

    private void txtBatchBrightnessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBatchBrightnessActionPerformed
        // TODO add your handling code here:
         // Optional enhancement
        rdoSetBrightness.setSelected(true); // Automatically select "Set Brightness"
    }//GEN-LAST:event_txtBatchBrightnessActionPerformed

    private void btnSetBrightnessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetBrightnessActionPerformed
        // TODO add your handling code here:
        try {
            // Check whether the "Light ON" radio button is selected
            // This determines whether the toggle command should turn the light on or off
            boolean isOn = rdoToggleOn.isSelected(); // You can use chkLight.isSelected() if using a checkbox instead

            // Get the current value from the brightness slider (0–100)
            int brightness = sliderBrightness.getValue();

            // Build a Device object referencing the lighting device
            Device device = Device.newBuilder().setId("device-light-1").build();

            // Create a toggle request to switch the light on or off
            ToggleRequest toggleRequest = ToggleRequest.newBuilder()
                .setAuth(auth)            // Add authentication credentials
                .setDevice(device)        // Assign the target device
                .setOn(isOn)              // Specify the toggle state (on/off)
                .build();
            

            // Send the toggle request to the lighting service (unary call)
            lightingStub.toggleLight(toggleRequest);

            // If the light is OFF, brightness cannot be applied — inform the user and exit
            if (!isOn) {
                txtBatchLog.append(" Light is OFF. Turn it ON to apply brightness.\n");
                return;
            }

            // Build a brightness request with the selected brightness level
            BrightnessRequest brightnessRequest = BrightnessRequest.newBuilder()
                .setAuth(auth)            // Use same auth credentials
                .setDevice(device)        // Same target device
                .setPercent(brightness)   // Desired brightness value
                .build();

            // Send the brightness request and receive response from the lighting service
            StatusResponse response = lightingStub.setBrightness(brightnessRequest);

            // Display the response message in the batch log area
            txtBatchLog.append(" Light updated: " + response.getMessage() + "\n");

        } catch (Exception e) {
        // Catch any exceptions (e.g., communication failure, null references) and show an error in the log
            txtBatchLog.append(" Error applying light changes: " + e.getMessage() + "\n");
        }
        
    }//GEN-LAST:event_btnSetBrightnessActionPerformed

    private void btnStopCameraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopCameraActionPerformed
        // Check if a camera streaming context currently exists
        if (cameraContext != null) {

            // Cancel the current gRPC context to stop the camera stream from the client side
            cameraContext.cancel(null);

            // Notify the user that the camera stream was manually stopped
            txtSecurityLog.append(" Camera stream stopped by client.\n");
        }
    }//GEN-LAST:event_btnStopCameraActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SmartHomeGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SmartHomeGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SmartHomeGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SmartHomeGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SmartHomeGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Brightness;
    private javax.swing.JInternalFrame Climate;
    private javax.swing.JInternalFrame Lighting;
    private javax.swing.JInternalFrame Security;
    private javax.swing.JButton btnAddToBatch;
    private javax.swing.JButton btnAdjustDown;
    private javax.swing.JButton btnAdjustUp;
    private javax.swing.JButton btnLock;
    private javax.swing.JButton btnSendBatch;
    private javax.swing.JButton btnSetBrightness;
    private javax.swing.JButton btnSetTemp;
    private javax.swing.JButton btnStartCamera;
    private javax.swing.JButton btnStopCamera;
    private javax.swing.JButton btnUnlock;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.ButtonGroup lightCommandGroup;
    private javax.swing.JRadioButton rdoSetBrightness;
    private javax.swing.JRadioButton rdoToggleOff;
    private javax.swing.JRadioButton rdoToggleOn;
    private javax.swing.JSlider sliderBrightness;
    private javax.swing.JTextField txtBatchBrightness;
    private javax.swing.JTextArea txtBatchLog;
    private javax.swing.JTextArea txtClimateLog;
    private javax.swing.JTextArea txtSecurityLog;
    private javax.swing.JTextField txtTargetTemp;
    // End of variables declaration//GEN-END:variables
}
