// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: climate.proto

package smarthome.climate;

public final class Climate {
  private Climate() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface SetTemperatureRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:smarthome.climate.SetTemperatureRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Desired target temperature
     * </pre>
     *
     * <code>float temperature = 1;</code>
     * @return The temperature.
     */
    float getTemperature();

    /**
     * <pre>
     * Authentication token (API key + device ID)
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     * @return Whether the auth field is set.
     */
    boolean hasAuth();
    /**
     * <pre>
     * Authentication token (API key + device ID)
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     * @return The auth.
     */
    smarthome.common.Common.Auth getAuth();
    /**
     * <pre>
     * Authentication token (API key + device ID)
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     */
    smarthome.common.Common.AuthOrBuilder getAuthOrBuilder();
  }
  /**
   * <pre>
   * Request message to set a new target temperature
   * </pre>
   *
   * Protobuf type {@code smarthome.climate.SetTemperatureRequest}
   */
  public static final class SetTemperatureRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:smarthome.climate.SetTemperatureRequest)
      SetTemperatureRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SetTemperatureRequest.newBuilder() to construct.
    private SetTemperatureRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SetTemperatureRequest() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SetTemperatureRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SetTemperatureRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 13: {

              temperature_ = input.readFloat();
              break;
            }
            case 18: {
              smarthome.common.Common.Auth.Builder subBuilder = null;
              if (auth_ != null) {
                subBuilder = auth_.toBuilder();
              }
              auth_ = input.readMessage(smarthome.common.Common.Auth.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(auth_);
                auth_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return smarthome.climate.Climate.internal_static_smarthome_climate_SetTemperatureRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return smarthome.climate.Climate.internal_static_smarthome_climate_SetTemperatureRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              smarthome.climate.Climate.SetTemperatureRequest.class, smarthome.climate.Climate.SetTemperatureRequest.Builder.class);
    }

    public static final int TEMPERATURE_FIELD_NUMBER = 1;
    private float temperature_;
    /**
     * <pre>
     * Desired target temperature
     * </pre>
     *
     * <code>float temperature = 1;</code>
     * @return The temperature.
     */
    @java.lang.Override
    public float getTemperature() {
      return temperature_;
    }

    public static final int AUTH_FIELD_NUMBER = 2;
    private smarthome.common.Common.Auth auth_;
    /**
     * <pre>
     * Authentication token (API key + device ID)
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     * @return Whether the auth field is set.
     */
    @java.lang.Override
    public boolean hasAuth() {
      return auth_ != null;
    }
    /**
     * <pre>
     * Authentication token (API key + device ID)
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     * @return The auth.
     */
    @java.lang.Override
    public smarthome.common.Common.Auth getAuth() {
      return auth_ == null ? smarthome.common.Common.Auth.getDefaultInstance() : auth_;
    }
    /**
     * <pre>
     * Authentication token (API key + device ID)
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     */
    @java.lang.Override
    public smarthome.common.Common.AuthOrBuilder getAuthOrBuilder() {
      return getAuth();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (java.lang.Float.floatToRawIntBits(temperature_) != 0) {
        output.writeFloat(1, temperature_);
      }
      if (auth_ != null) {
        output.writeMessage(2, getAuth());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (java.lang.Float.floatToRawIntBits(temperature_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, temperature_);
      }
      if (auth_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getAuth());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof smarthome.climate.Climate.SetTemperatureRequest)) {
        return super.equals(obj);
      }
      smarthome.climate.Climate.SetTemperatureRequest other = (smarthome.climate.Climate.SetTemperatureRequest) obj;

      if (java.lang.Float.floatToIntBits(getTemperature())
          != java.lang.Float.floatToIntBits(
              other.getTemperature())) return false;
      if (hasAuth() != other.hasAuth()) return false;
      if (hasAuth()) {
        if (!getAuth()
            .equals(other.getAuth())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TEMPERATURE_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getTemperature());
      if (hasAuth()) {
        hash = (37 * hash) + AUTH_FIELD_NUMBER;
        hash = (53 * hash) + getAuth().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static smarthome.climate.Climate.SetTemperatureRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.climate.Climate.SetTemperatureRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.climate.Climate.SetTemperatureRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.climate.Climate.SetTemperatureRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.climate.Climate.SetTemperatureRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.climate.Climate.SetTemperatureRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.climate.Climate.SetTemperatureRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smarthome.climate.Climate.SetTemperatureRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static smarthome.climate.Climate.SetTemperatureRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static smarthome.climate.Climate.SetTemperatureRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static smarthome.climate.Climate.SetTemperatureRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smarthome.climate.Climate.SetTemperatureRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(smarthome.climate.Climate.SetTemperatureRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Request message to set a new target temperature
     * </pre>
     *
     * Protobuf type {@code smarthome.climate.SetTemperatureRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:smarthome.climate.SetTemperatureRequest)
        smarthome.climate.Climate.SetTemperatureRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return smarthome.climate.Climate.internal_static_smarthome_climate_SetTemperatureRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return smarthome.climate.Climate.internal_static_smarthome_climate_SetTemperatureRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                smarthome.climate.Climate.SetTemperatureRequest.class, smarthome.climate.Climate.SetTemperatureRequest.Builder.class);
      }

      // Construct using smarthome.climate.Climate.SetTemperatureRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        temperature_ = 0F;

        if (authBuilder_ == null) {
          auth_ = null;
        } else {
          auth_ = null;
          authBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return smarthome.climate.Climate.internal_static_smarthome_climate_SetTemperatureRequest_descriptor;
      }

      @java.lang.Override
      public smarthome.climate.Climate.SetTemperatureRequest getDefaultInstanceForType() {
        return smarthome.climate.Climate.SetTemperatureRequest.getDefaultInstance();
      }

      @java.lang.Override
      public smarthome.climate.Climate.SetTemperatureRequest build() {
        smarthome.climate.Climate.SetTemperatureRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public smarthome.climate.Climate.SetTemperatureRequest buildPartial() {
        smarthome.climate.Climate.SetTemperatureRequest result = new smarthome.climate.Climate.SetTemperatureRequest(this);
        result.temperature_ = temperature_;
        if (authBuilder_ == null) {
          result.auth_ = auth_;
        } else {
          result.auth_ = authBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof smarthome.climate.Climate.SetTemperatureRequest) {
          return mergeFrom((smarthome.climate.Climate.SetTemperatureRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(smarthome.climate.Climate.SetTemperatureRequest other) {
        if (other == smarthome.climate.Climate.SetTemperatureRequest.getDefaultInstance()) return this;
        if (other.getTemperature() != 0F) {
          setTemperature(other.getTemperature());
        }
        if (other.hasAuth()) {
          mergeAuth(other.getAuth());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        smarthome.climate.Climate.SetTemperatureRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (smarthome.climate.Climate.SetTemperatureRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private float temperature_ ;
      /**
       * <pre>
       * Desired target temperature
       * </pre>
       *
       * <code>float temperature = 1;</code>
       * @return The temperature.
       */
      @java.lang.Override
      public float getTemperature() {
        return temperature_;
      }
      /**
       * <pre>
       * Desired target temperature
       * </pre>
       *
       * <code>float temperature = 1;</code>
       * @param value The temperature to set.
       * @return This builder for chaining.
       */
      public Builder setTemperature(float value) {
        
        temperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Desired target temperature
       * </pre>
       *
       * <code>float temperature = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearTemperature() {
        
        temperature_ = 0F;
        onChanged();
        return this;
      }

      private smarthome.common.Common.Auth auth_;
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Auth, smarthome.common.Common.Auth.Builder, smarthome.common.Common.AuthOrBuilder> authBuilder_;
      /**
       * <pre>
       * Authentication token (API key + device ID)
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       * @return Whether the auth field is set.
       */
      public boolean hasAuth() {
        return authBuilder_ != null || auth_ != null;
      }
      /**
       * <pre>
       * Authentication token (API key + device ID)
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       * @return The auth.
       */
      public smarthome.common.Common.Auth getAuth() {
        if (authBuilder_ == null) {
          return auth_ == null ? smarthome.common.Common.Auth.getDefaultInstance() : auth_;
        } else {
          return authBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Authentication token (API key + device ID)
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public Builder setAuth(smarthome.common.Common.Auth value) {
        if (authBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          auth_ = value;
          onChanged();
        } else {
          authBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Authentication token (API key + device ID)
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public Builder setAuth(
          smarthome.common.Common.Auth.Builder builderForValue) {
        if (authBuilder_ == null) {
          auth_ = builderForValue.build();
          onChanged();
        } else {
          authBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Authentication token (API key + device ID)
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public Builder mergeAuth(smarthome.common.Common.Auth value) {
        if (authBuilder_ == null) {
          if (auth_ != null) {
            auth_ =
              smarthome.common.Common.Auth.newBuilder(auth_).mergeFrom(value).buildPartial();
          } else {
            auth_ = value;
          }
          onChanged();
        } else {
          authBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Authentication token (API key + device ID)
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public Builder clearAuth() {
        if (authBuilder_ == null) {
          auth_ = null;
          onChanged();
        } else {
          auth_ = null;
          authBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Authentication token (API key + device ID)
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public smarthome.common.Common.Auth.Builder getAuthBuilder() {
        
        onChanged();
        return getAuthFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Authentication token (API key + device ID)
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public smarthome.common.Common.AuthOrBuilder getAuthOrBuilder() {
        if (authBuilder_ != null) {
          return authBuilder_.getMessageOrBuilder();
        } else {
          return auth_ == null ?
              smarthome.common.Common.Auth.getDefaultInstance() : auth_;
        }
      }
      /**
       * <pre>
       * Authentication token (API key + device ID)
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Auth, smarthome.common.Common.Auth.Builder, smarthome.common.Common.AuthOrBuilder> 
          getAuthFieldBuilder() {
        if (authBuilder_ == null) {
          authBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              smarthome.common.Common.Auth, smarthome.common.Common.Auth.Builder, smarthome.common.Common.AuthOrBuilder>(
                  getAuth(),
                  getParentForChildren(),
                  isClean());
          auth_ = null;
        }
        return authBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:smarthome.climate.SetTemperatureRequest)
    }

    // @@protoc_insertion_point(class_scope:smarthome.climate.SetTemperatureRequest)
    private static final smarthome.climate.Climate.SetTemperatureRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new smarthome.climate.Climate.SetTemperatureRequest();
    }

    public static smarthome.climate.Climate.SetTemperatureRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SetTemperatureRequest>
        PARSER = new com.google.protobuf.AbstractParser<SetTemperatureRequest>() {
      @java.lang.Override
      public SetTemperatureRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SetTemperatureRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SetTemperatureRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SetTemperatureRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public smarthome.climate.Climate.SetTemperatureRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GetTemperatureRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:smarthome.climate.GetTemperatureRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Target device (e.g., thermostat ID)
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return Whether the device field is set.
     */
    boolean hasDevice();
    /**
     * <pre>
     * Target device (e.g., thermostat ID)
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return The device.
     */
    smarthome.common.Common.Device getDevice();
    /**
     * <pre>
     * Target device (e.g., thermostat ID)
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     */
    smarthome.common.Common.DeviceOrBuilder getDeviceOrBuilder();

    /**
     * <pre>
     * Authentication information
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     * @return Whether the auth field is set.
     */
    boolean hasAuth();
    /**
     * <pre>
     * Authentication information
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     * @return The auth.
     */
    smarthome.common.Common.Auth getAuth();
    /**
     * <pre>
     * Authentication information
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     */
    smarthome.common.Common.AuthOrBuilder getAuthOrBuilder();
  }
  /**
   * <pre>
   * Request message to retrieve current temperature and humidity
   * </pre>
   *
   * Protobuf type {@code smarthome.climate.GetTemperatureRequest}
   */
  public static final class GetTemperatureRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:smarthome.climate.GetTemperatureRequest)
      GetTemperatureRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use GetTemperatureRequest.newBuilder() to construct.
    private GetTemperatureRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GetTemperatureRequest() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new GetTemperatureRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private GetTemperatureRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              smarthome.common.Common.Device.Builder subBuilder = null;
              if (device_ != null) {
                subBuilder = device_.toBuilder();
              }
              device_ = input.readMessage(smarthome.common.Common.Device.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(device_);
                device_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              smarthome.common.Common.Auth.Builder subBuilder = null;
              if (auth_ != null) {
                subBuilder = auth_.toBuilder();
              }
              auth_ = input.readMessage(smarthome.common.Common.Auth.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(auth_);
                auth_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return smarthome.climate.Climate.internal_static_smarthome_climate_GetTemperatureRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return smarthome.climate.Climate.internal_static_smarthome_climate_GetTemperatureRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              smarthome.climate.Climate.GetTemperatureRequest.class, smarthome.climate.Climate.GetTemperatureRequest.Builder.class);
    }

    public static final int DEVICE_FIELD_NUMBER = 1;
    private smarthome.common.Common.Device device_;
    /**
     * <pre>
     * Target device (e.g., thermostat ID)
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return Whether the device field is set.
     */
    @java.lang.Override
    public boolean hasDevice() {
      return device_ != null;
    }
    /**
     * <pre>
     * Target device (e.g., thermostat ID)
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return The device.
     */
    @java.lang.Override
    public smarthome.common.Common.Device getDevice() {
      return device_ == null ? smarthome.common.Common.Device.getDefaultInstance() : device_;
    }
    /**
     * <pre>
     * Target device (e.g., thermostat ID)
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     */
    @java.lang.Override
    public smarthome.common.Common.DeviceOrBuilder getDeviceOrBuilder() {
      return getDevice();
    }

    public static final int AUTH_FIELD_NUMBER = 2;
    private smarthome.common.Common.Auth auth_;
    /**
     * <pre>
     * Authentication information
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     * @return Whether the auth field is set.
     */
    @java.lang.Override
    public boolean hasAuth() {
      return auth_ != null;
    }
    /**
     * <pre>
     * Authentication information
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     * @return The auth.
     */
    @java.lang.Override
    public smarthome.common.Common.Auth getAuth() {
      return auth_ == null ? smarthome.common.Common.Auth.getDefaultInstance() : auth_;
    }
    /**
     * <pre>
     * Authentication information
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     */
    @java.lang.Override
    public smarthome.common.Common.AuthOrBuilder getAuthOrBuilder() {
      return getAuth();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (device_ != null) {
        output.writeMessage(1, getDevice());
      }
      if (auth_ != null) {
        output.writeMessage(2, getAuth());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (device_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getDevice());
      }
      if (auth_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getAuth());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof smarthome.climate.Climate.GetTemperatureRequest)) {
        return super.equals(obj);
      }
      smarthome.climate.Climate.GetTemperatureRequest other = (smarthome.climate.Climate.GetTemperatureRequest) obj;

      if (hasDevice() != other.hasDevice()) return false;
      if (hasDevice()) {
        if (!getDevice()
            .equals(other.getDevice())) return false;
      }
      if (hasAuth() != other.hasAuth()) return false;
      if (hasAuth()) {
        if (!getAuth()
            .equals(other.getAuth())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasDevice()) {
        hash = (37 * hash) + DEVICE_FIELD_NUMBER;
        hash = (53 * hash) + getDevice().hashCode();
      }
      if (hasAuth()) {
        hash = (37 * hash) + AUTH_FIELD_NUMBER;
        hash = (53 * hash) + getAuth().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static smarthome.climate.Climate.GetTemperatureRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.climate.Climate.GetTemperatureRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.climate.Climate.GetTemperatureRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.climate.Climate.GetTemperatureRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.climate.Climate.GetTemperatureRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.climate.Climate.GetTemperatureRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.climate.Climate.GetTemperatureRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smarthome.climate.Climate.GetTemperatureRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static smarthome.climate.Climate.GetTemperatureRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static smarthome.climate.Climate.GetTemperatureRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static smarthome.climate.Climate.GetTemperatureRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smarthome.climate.Climate.GetTemperatureRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(smarthome.climate.Climate.GetTemperatureRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Request message to retrieve current temperature and humidity
     * </pre>
     *
     * Protobuf type {@code smarthome.climate.GetTemperatureRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:smarthome.climate.GetTemperatureRequest)
        smarthome.climate.Climate.GetTemperatureRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return smarthome.climate.Climate.internal_static_smarthome_climate_GetTemperatureRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return smarthome.climate.Climate.internal_static_smarthome_climate_GetTemperatureRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                smarthome.climate.Climate.GetTemperatureRequest.class, smarthome.climate.Climate.GetTemperatureRequest.Builder.class);
      }

      // Construct using smarthome.climate.Climate.GetTemperatureRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (deviceBuilder_ == null) {
          device_ = null;
        } else {
          device_ = null;
          deviceBuilder_ = null;
        }
        if (authBuilder_ == null) {
          auth_ = null;
        } else {
          auth_ = null;
          authBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return smarthome.climate.Climate.internal_static_smarthome_climate_GetTemperatureRequest_descriptor;
      }

      @java.lang.Override
      public smarthome.climate.Climate.GetTemperatureRequest getDefaultInstanceForType() {
        return smarthome.climate.Climate.GetTemperatureRequest.getDefaultInstance();
      }

      @java.lang.Override
      public smarthome.climate.Climate.GetTemperatureRequest build() {
        smarthome.climate.Climate.GetTemperatureRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public smarthome.climate.Climate.GetTemperatureRequest buildPartial() {
        smarthome.climate.Climate.GetTemperatureRequest result = new smarthome.climate.Climate.GetTemperatureRequest(this);
        if (deviceBuilder_ == null) {
          result.device_ = device_;
        } else {
          result.device_ = deviceBuilder_.build();
        }
        if (authBuilder_ == null) {
          result.auth_ = auth_;
        } else {
          result.auth_ = authBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof smarthome.climate.Climate.GetTemperatureRequest) {
          return mergeFrom((smarthome.climate.Climate.GetTemperatureRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(smarthome.climate.Climate.GetTemperatureRequest other) {
        if (other == smarthome.climate.Climate.GetTemperatureRequest.getDefaultInstance()) return this;
        if (other.hasDevice()) {
          mergeDevice(other.getDevice());
        }
        if (other.hasAuth()) {
          mergeAuth(other.getAuth());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        smarthome.climate.Climate.GetTemperatureRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (smarthome.climate.Climate.GetTemperatureRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private smarthome.common.Common.Device device_;
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Device, smarthome.common.Common.Device.Builder, smarthome.common.Common.DeviceOrBuilder> deviceBuilder_;
      /**
       * <pre>
       * Target device (e.g., thermostat ID)
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       * @return Whether the device field is set.
       */
      public boolean hasDevice() {
        return deviceBuilder_ != null || device_ != null;
      }
      /**
       * <pre>
       * Target device (e.g., thermostat ID)
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       * @return The device.
       */
      public smarthome.common.Common.Device getDevice() {
        if (deviceBuilder_ == null) {
          return device_ == null ? smarthome.common.Common.Device.getDefaultInstance() : device_;
        } else {
          return deviceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Target device (e.g., thermostat ID)
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder setDevice(smarthome.common.Common.Device value) {
        if (deviceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          device_ = value;
          onChanged();
        } else {
          deviceBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Target device (e.g., thermostat ID)
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder setDevice(
          smarthome.common.Common.Device.Builder builderForValue) {
        if (deviceBuilder_ == null) {
          device_ = builderForValue.build();
          onChanged();
        } else {
          deviceBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Target device (e.g., thermostat ID)
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder mergeDevice(smarthome.common.Common.Device value) {
        if (deviceBuilder_ == null) {
          if (device_ != null) {
            device_ =
              smarthome.common.Common.Device.newBuilder(device_).mergeFrom(value).buildPartial();
          } else {
            device_ = value;
          }
          onChanged();
        } else {
          deviceBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Target device (e.g., thermostat ID)
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder clearDevice() {
        if (deviceBuilder_ == null) {
          device_ = null;
          onChanged();
        } else {
          device_ = null;
          deviceBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Target device (e.g., thermostat ID)
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public smarthome.common.Common.Device.Builder getDeviceBuilder() {
        
        onChanged();
        return getDeviceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Target device (e.g., thermostat ID)
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public smarthome.common.Common.DeviceOrBuilder getDeviceOrBuilder() {
        if (deviceBuilder_ != null) {
          return deviceBuilder_.getMessageOrBuilder();
        } else {
          return device_ == null ?
              smarthome.common.Common.Device.getDefaultInstance() : device_;
        }
      }
      /**
       * <pre>
       * Target device (e.g., thermostat ID)
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Device, smarthome.common.Common.Device.Builder, smarthome.common.Common.DeviceOrBuilder> 
          getDeviceFieldBuilder() {
        if (deviceBuilder_ == null) {
          deviceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              smarthome.common.Common.Device, smarthome.common.Common.Device.Builder, smarthome.common.Common.DeviceOrBuilder>(
                  getDevice(),
                  getParentForChildren(),
                  isClean());
          device_ = null;
        }
        return deviceBuilder_;
      }

      private smarthome.common.Common.Auth auth_;
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Auth, smarthome.common.Common.Auth.Builder, smarthome.common.Common.AuthOrBuilder> authBuilder_;
      /**
       * <pre>
       * Authentication information
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       * @return Whether the auth field is set.
       */
      public boolean hasAuth() {
        return authBuilder_ != null || auth_ != null;
      }
      /**
       * <pre>
       * Authentication information
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       * @return The auth.
       */
      public smarthome.common.Common.Auth getAuth() {
        if (authBuilder_ == null) {
          return auth_ == null ? smarthome.common.Common.Auth.getDefaultInstance() : auth_;
        } else {
          return authBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Authentication information
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public Builder setAuth(smarthome.common.Common.Auth value) {
        if (authBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          auth_ = value;
          onChanged();
        } else {
          authBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Authentication information
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public Builder setAuth(
          smarthome.common.Common.Auth.Builder builderForValue) {
        if (authBuilder_ == null) {
          auth_ = builderForValue.build();
          onChanged();
        } else {
          authBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Authentication information
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public Builder mergeAuth(smarthome.common.Common.Auth value) {
        if (authBuilder_ == null) {
          if (auth_ != null) {
            auth_ =
              smarthome.common.Common.Auth.newBuilder(auth_).mergeFrom(value).buildPartial();
          } else {
            auth_ = value;
          }
          onChanged();
        } else {
          authBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Authentication information
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public Builder clearAuth() {
        if (authBuilder_ == null) {
          auth_ = null;
          onChanged();
        } else {
          auth_ = null;
          authBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Authentication information
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public smarthome.common.Common.Auth.Builder getAuthBuilder() {
        
        onChanged();
        return getAuthFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Authentication information
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public smarthome.common.Common.AuthOrBuilder getAuthOrBuilder() {
        if (authBuilder_ != null) {
          return authBuilder_.getMessageOrBuilder();
        } else {
          return auth_ == null ?
              smarthome.common.Common.Auth.getDefaultInstance() : auth_;
        }
      }
      /**
       * <pre>
       * Authentication information
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Auth, smarthome.common.Common.Auth.Builder, smarthome.common.Common.AuthOrBuilder> 
          getAuthFieldBuilder() {
        if (authBuilder_ == null) {
          authBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              smarthome.common.Common.Auth, smarthome.common.Common.Auth.Builder, smarthome.common.Common.AuthOrBuilder>(
                  getAuth(),
                  getParentForChildren(),
                  isClean());
          auth_ = null;
        }
        return authBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:smarthome.climate.GetTemperatureRequest)
    }

    // @@protoc_insertion_point(class_scope:smarthome.climate.GetTemperatureRequest)
    private static final smarthome.climate.Climate.GetTemperatureRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new smarthome.climate.Climate.GetTemperatureRequest();
    }

    public static smarthome.climate.Climate.GetTemperatureRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GetTemperatureRequest>
        PARSER = new com.google.protobuf.AbstractParser<GetTemperatureRequest>() {
      @java.lang.Override
      public GetTemperatureRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GetTemperatureRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<GetTemperatureRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GetTemperatureRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public smarthome.climate.Climate.GetTemperatureRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TemperatureResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:smarthome.climate.TemperatureResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Current measured temperature
     * </pre>
     *
     * <code>float current_temp = 1;</code>
     * @return The currentTemp.
     */
    float getCurrentTemp();

    /**
     * <pre>
     * Current target temperature set by the system
     * </pre>
     *
     * <code>float target_temp = 2;</code>
     * @return The targetTemp.
     */
    float getTargetTemp();

    /**
     * <pre>
     * Current measured humidity
     * </pre>
     *
     * <code>float humidity = 3;</code>
     * @return The humidity.
     */
    float getHumidity();
  }
  /**
   * <pre>
   * Response with current environmental readings
   * </pre>
   *
   * Protobuf type {@code smarthome.climate.TemperatureResponse}
   */
  public static final class TemperatureResponse extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:smarthome.climate.TemperatureResponse)
      TemperatureResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TemperatureResponse.newBuilder() to construct.
    private TemperatureResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TemperatureResponse() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TemperatureResponse();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TemperatureResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 13: {

              currentTemp_ = input.readFloat();
              break;
            }
            case 21: {

              targetTemp_ = input.readFloat();
              break;
            }
            case 29: {

              humidity_ = input.readFloat();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return smarthome.climate.Climate.internal_static_smarthome_climate_TemperatureResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return smarthome.climate.Climate.internal_static_smarthome_climate_TemperatureResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              smarthome.climate.Climate.TemperatureResponse.class, smarthome.climate.Climate.TemperatureResponse.Builder.class);
    }

    public static final int CURRENT_TEMP_FIELD_NUMBER = 1;
    private float currentTemp_;
    /**
     * <pre>
     * Current measured temperature
     * </pre>
     *
     * <code>float current_temp = 1;</code>
     * @return The currentTemp.
     */
    @java.lang.Override
    public float getCurrentTemp() {
      return currentTemp_;
    }

    public static final int TARGET_TEMP_FIELD_NUMBER = 2;
    private float targetTemp_;
    /**
     * <pre>
     * Current target temperature set by the system
     * </pre>
     *
     * <code>float target_temp = 2;</code>
     * @return The targetTemp.
     */
    @java.lang.Override
    public float getTargetTemp() {
      return targetTemp_;
    }

    public static final int HUMIDITY_FIELD_NUMBER = 3;
    private float humidity_;
    /**
     * <pre>
     * Current measured humidity
     * </pre>
     *
     * <code>float humidity = 3;</code>
     * @return The humidity.
     */
    @java.lang.Override
    public float getHumidity() {
      return humidity_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (java.lang.Float.floatToRawIntBits(currentTemp_) != 0) {
        output.writeFloat(1, currentTemp_);
      }
      if (java.lang.Float.floatToRawIntBits(targetTemp_) != 0) {
        output.writeFloat(2, targetTemp_);
      }
      if (java.lang.Float.floatToRawIntBits(humidity_) != 0) {
        output.writeFloat(3, humidity_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (java.lang.Float.floatToRawIntBits(currentTemp_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, currentTemp_);
      }
      if (java.lang.Float.floatToRawIntBits(targetTemp_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, targetTemp_);
      }
      if (java.lang.Float.floatToRawIntBits(humidity_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, humidity_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof smarthome.climate.Climate.TemperatureResponse)) {
        return super.equals(obj);
      }
      smarthome.climate.Climate.TemperatureResponse other = (smarthome.climate.Climate.TemperatureResponse) obj;

      if (java.lang.Float.floatToIntBits(getCurrentTemp())
          != java.lang.Float.floatToIntBits(
              other.getCurrentTemp())) return false;
      if (java.lang.Float.floatToIntBits(getTargetTemp())
          != java.lang.Float.floatToIntBits(
              other.getTargetTemp())) return false;
      if (java.lang.Float.floatToIntBits(getHumidity())
          != java.lang.Float.floatToIntBits(
              other.getHumidity())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CURRENT_TEMP_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getCurrentTemp());
      hash = (37 * hash) + TARGET_TEMP_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getTargetTemp());
      hash = (37 * hash) + HUMIDITY_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getHumidity());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static smarthome.climate.Climate.TemperatureResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.climate.Climate.TemperatureResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.climate.Climate.TemperatureResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.climate.Climate.TemperatureResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.climate.Climate.TemperatureResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.climate.Climate.TemperatureResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.climate.Climate.TemperatureResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smarthome.climate.Climate.TemperatureResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static smarthome.climate.Climate.TemperatureResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static smarthome.climate.Climate.TemperatureResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static smarthome.climate.Climate.TemperatureResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smarthome.climate.Climate.TemperatureResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(smarthome.climate.Climate.TemperatureResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Response with current environmental readings
     * </pre>
     *
     * Protobuf type {@code smarthome.climate.TemperatureResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:smarthome.climate.TemperatureResponse)
        smarthome.climate.Climate.TemperatureResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return smarthome.climate.Climate.internal_static_smarthome_climate_TemperatureResponse_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return smarthome.climate.Climate.internal_static_smarthome_climate_TemperatureResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                smarthome.climate.Climate.TemperatureResponse.class, smarthome.climate.Climate.TemperatureResponse.Builder.class);
      }

      // Construct using smarthome.climate.Climate.TemperatureResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        currentTemp_ = 0F;

        targetTemp_ = 0F;

        humidity_ = 0F;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return smarthome.climate.Climate.internal_static_smarthome_climate_TemperatureResponse_descriptor;
      }

      @java.lang.Override
      public smarthome.climate.Climate.TemperatureResponse getDefaultInstanceForType() {
        return smarthome.climate.Climate.TemperatureResponse.getDefaultInstance();
      }

      @java.lang.Override
      public smarthome.climate.Climate.TemperatureResponse build() {
        smarthome.climate.Climate.TemperatureResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public smarthome.climate.Climate.TemperatureResponse buildPartial() {
        smarthome.climate.Climate.TemperatureResponse result = new smarthome.climate.Climate.TemperatureResponse(this);
        result.currentTemp_ = currentTemp_;
        result.targetTemp_ = targetTemp_;
        result.humidity_ = humidity_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof smarthome.climate.Climate.TemperatureResponse) {
          return mergeFrom((smarthome.climate.Climate.TemperatureResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(smarthome.climate.Climate.TemperatureResponse other) {
        if (other == smarthome.climate.Climate.TemperatureResponse.getDefaultInstance()) return this;
        if (other.getCurrentTemp() != 0F) {
          setCurrentTemp(other.getCurrentTemp());
        }
        if (other.getTargetTemp() != 0F) {
          setTargetTemp(other.getTargetTemp());
        }
        if (other.getHumidity() != 0F) {
          setHumidity(other.getHumidity());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        smarthome.climate.Climate.TemperatureResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (smarthome.climate.Climate.TemperatureResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private float currentTemp_ ;
      /**
       * <pre>
       * Current measured temperature
       * </pre>
       *
       * <code>float current_temp = 1;</code>
       * @return The currentTemp.
       */
      @java.lang.Override
      public float getCurrentTemp() {
        return currentTemp_;
      }
      /**
       * <pre>
       * Current measured temperature
       * </pre>
       *
       * <code>float current_temp = 1;</code>
       * @param value The currentTemp to set.
       * @return This builder for chaining.
       */
      public Builder setCurrentTemp(float value) {
        
        currentTemp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Current measured temperature
       * </pre>
       *
       * <code>float current_temp = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearCurrentTemp() {
        
        currentTemp_ = 0F;
        onChanged();
        return this;
      }

      private float targetTemp_ ;
      /**
       * <pre>
       * Current target temperature set by the system
       * </pre>
       *
       * <code>float target_temp = 2;</code>
       * @return The targetTemp.
       */
      @java.lang.Override
      public float getTargetTemp() {
        return targetTemp_;
      }
      /**
       * <pre>
       * Current target temperature set by the system
       * </pre>
       *
       * <code>float target_temp = 2;</code>
       * @param value The targetTemp to set.
       * @return This builder for chaining.
       */
      public Builder setTargetTemp(float value) {
        
        targetTemp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Current target temperature set by the system
       * </pre>
       *
       * <code>float target_temp = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearTargetTemp() {
        
        targetTemp_ = 0F;
        onChanged();
        return this;
      }

      private float humidity_ ;
      /**
       * <pre>
       * Current measured humidity
       * </pre>
       *
       * <code>float humidity = 3;</code>
       * @return The humidity.
       */
      @java.lang.Override
      public float getHumidity() {
        return humidity_;
      }
      /**
       * <pre>
       * Current measured humidity
       * </pre>
       *
       * <code>float humidity = 3;</code>
       * @param value The humidity to set.
       * @return This builder for chaining.
       */
      public Builder setHumidity(float value) {
        
        humidity_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Current measured humidity
       * </pre>
       *
       * <code>float humidity = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearHumidity() {
        
        humidity_ = 0F;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:smarthome.climate.TemperatureResponse)
    }

    // @@protoc_insertion_point(class_scope:smarthome.climate.TemperatureResponse)
    private static final smarthome.climate.Climate.TemperatureResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new smarthome.climate.Climate.TemperatureResponse();
    }

    public static smarthome.climate.Climate.TemperatureResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TemperatureResponse>
        PARSER = new com.google.protobuf.AbstractParser<TemperatureResponse>() {
      @java.lang.Override
      public TemperatureResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TemperatureResponse(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TemperatureResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TemperatureResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public smarthome.climate.Climate.TemperatureResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ClimateStreamRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:smarthome.climate.ClimateStreamRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Device to monitor
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return Whether the device field is set.
     */
    boolean hasDevice();
    /**
     * <pre>
     * Device to monitor
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return The device.
     */
    smarthome.common.Common.Device getDevice();
    /**
     * <pre>
     * Device to monitor
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     */
    smarthome.common.Common.DeviceOrBuilder getDeviceOrBuilder();

    /**
     * <pre>
     * Auth token for verification
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     * @return Whether the auth field is set.
     */
    boolean hasAuth();
    /**
     * <pre>
     * Auth token for verification
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     * @return The auth.
     */
    smarthome.common.Common.Auth getAuth();
    /**
     * <pre>
     * Auth token for verification
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     */
    smarthome.common.Common.AuthOrBuilder getAuthOrBuilder();

    /**
     * <pre>
     * Frequency of updates in seconds
     * </pre>
     *
     * <code>int32 update_interval_seconds = 3;</code>
     * @return The updateIntervalSeconds.
     */
    int getUpdateIntervalSeconds();
  }
  /**
   * <pre>
   * Request to start streaming periodic climate updates
   * </pre>
   *
   * Protobuf type {@code smarthome.climate.ClimateStreamRequest}
   */
  public static final class ClimateStreamRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:smarthome.climate.ClimateStreamRequest)
      ClimateStreamRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ClimateStreamRequest.newBuilder() to construct.
    private ClimateStreamRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ClimateStreamRequest() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ClimateStreamRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ClimateStreamRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              smarthome.common.Common.Device.Builder subBuilder = null;
              if (device_ != null) {
                subBuilder = device_.toBuilder();
              }
              device_ = input.readMessage(smarthome.common.Common.Device.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(device_);
                device_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              smarthome.common.Common.Auth.Builder subBuilder = null;
              if (auth_ != null) {
                subBuilder = auth_.toBuilder();
              }
              auth_ = input.readMessage(smarthome.common.Common.Auth.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(auth_);
                auth_ = subBuilder.buildPartial();
              }

              break;
            }
            case 24: {

              updateIntervalSeconds_ = input.readInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return smarthome.climate.Climate.internal_static_smarthome_climate_ClimateStreamRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return smarthome.climate.Climate.internal_static_smarthome_climate_ClimateStreamRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              smarthome.climate.Climate.ClimateStreamRequest.class, smarthome.climate.Climate.ClimateStreamRequest.Builder.class);
    }

    public static final int DEVICE_FIELD_NUMBER = 1;
    private smarthome.common.Common.Device device_;
    /**
     * <pre>
     * Device to monitor
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return Whether the device field is set.
     */
    @java.lang.Override
    public boolean hasDevice() {
      return device_ != null;
    }
    /**
     * <pre>
     * Device to monitor
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return The device.
     */
    @java.lang.Override
    public smarthome.common.Common.Device getDevice() {
      return device_ == null ? smarthome.common.Common.Device.getDefaultInstance() : device_;
    }
    /**
     * <pre>
     * Device to monitor
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     */
    @java.lang.Override
    public smarthome.common.Common.DeviceOrBuilder getDeviceOrBuilder() {
      return getDevice();
    }

    public static final int AUTH_FIELD_NUMBER = 2;
    private smarthome.common.Common.Auth auth_;
    /**
     * <pre>
     * Auth token for verification
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     * @return Whether the auth field is set.
     */
    @java.lang.Override
    public boolean hasAuth() {
      return auth_ != null;
    }
    /**
     * <pre>
     * Auth token for verification
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     * @return The auth.
     */
    @java.lang.Override
    public smarthome.common.Common.Auth getAuth() {
      return auth_ == null ? smarthome.common.Common.Auth.getDefaultInstance() : auth_;
    }
    /**
     * <pre>
     * Auth token for verification
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     */
    @java.lang.Override
    public smarthome.common.Common.AuthOrBuilder getAuthOrBuilder() {
      return getAuth();
    }

    public static final int UPDATE_INTERVAL_SECONDS_FIELD_NUMBER = 3;
    private int updateIntervalSeconds_;
    /**
     * <pre>
     * Frequency of updates in seconds
     * </pre>
     *
     * <code>int32 update_interval_seconds = 3;</code>
     * @return The updateIntervalSeconds.
     */
    @java.lang.Override
    public int getUpdateIntervalSeconds() {
      return updateIntervalSeconds_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (device_ != null) {
        output.writeMessage(1, getDevice());
      }
      if (auth_ != null) {
        output.writeMessage(2, getAuth());
      }
      if (updateIntervalSeconds_ != 0) {
        output.writeInt32(3, updateIntervalSeconds_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (device_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getDevice());
      }
      if (auth_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getAuth());
      }
      if (updateIntervalSeconds_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, updateIntervalSeconds_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof smarthome.climate.Climate.ClimateStreamRequest)) {
        return super.equals(obj);
      }
      smarthome.climate.Climate.ClimateStreamRequest other = (smarthome.climate.Climate.ClimateStreamRequest) obj;

      if (hasDevice() != other.hasDevice()) return false;
      if (hasDevice()) {
        if (!getDevice()
            .equals(other.getDevice())) return false;
      }
      if (hasAuth() != other.hasAuth()) return false;
      if (hasAuth()) {
        if (!getAuth()
            .equals(other.getAuth())) return false;
      }
      if (getUpdateIntervalSeconds()
          != other.getUpdateIntervalSeconds()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasDevice()) {
        hash = (37 * hash) + DEVICE_FIELD_NUMBER;
        hash = (53 * hash) + getDevice().hashCode();
      }
      if (hasAuth()) {
        hash = (37 * hash) + AUTH_FIELD_NUMBER;
        hash = (53 * hash) + getAuth().hashCode();
      }
      hash = (37 * hash) + UPDATE_INTERVAL_SECONDS_FIELD_NUMBER;
      hash = (53 * hash) + getUpdateIntervalSeconds();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static smarthome.climate.Climate.ClimateStreamRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.climate.Climate.ClimateStreamRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.climate.Climate.ClimateStreamRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.climate.Climate.ClimateStreamRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.climate.Climate.ClimateStreamRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.climate.Climate.ClimateStreamRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.climate.Climate.ClimateStreamRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smarthome.climate.Climate.ClimateStreamRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static smarthome.climate.Climate.ClimateStreamRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static smarthome.climate.Climate.ClimateStreamRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static smarthome.climate.Climate.ClimateStreamRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smarthome.climate.Climate.ClimateStreamRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(smarthome.climate.Climate.ClimateStreamRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Request to start streaming periodic climate updates
     * </pre>
     *
     * Protobuf type {@code smarthome.climate.ClimateStreamRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:smarthome.climate.ClimateStreamRequest)
        smarthome.climate.Climate.ClimateStreamRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return smarthome.climate.Climate.internal_static_smarthome_climate_ClimateStreamRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return smarthome.climate.Climate.internal_static_smarthome_climate_ClimateStreamRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                smarthome.climate.Climate.ClimateStreamRequest.class, smarthome.climate.Climate.ClimateStreamRequest.Builder.class);
      }

      // Construct using smarthome.climate.Climate.ClimateStreamRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (deviceBuilder_ == null) {
          device_ = null;
        } else {
          device_ = null;
          deviceBuilder_ = null;
        }
        if (authBuilder_ == null) {
          auth_ = null;
        } else {
          auth_ = null;
          authBuilder_ = null;
        }
        updateIntervalSeconds_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return smarthome.climate.Climate.internal_static_smarthome_climate_ClimateStreamRequest_descriptor;
      }

      @java.lang.Override
      public smarthome.climate.Climate.ClimateStreamRequest getDefaultInstanceForType() {
        return smarthome.climate.Climate.ClimateStreamRequest.getDefaultInstance();
      }

      @java.lang.Override
      public smarthome.climate.Climate.ClimateStreamRequest build() {
        smarthome.climate.Climate.ClimateStreamRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public smarthome.climate.Climate.ClimateStreamRequest buildPartial() {
        smarthome.climate.Climate.ClimateStreamRequest result = new smarthome.climate.Climate.ClimateStreamRequest(this);
        if (deviceBuilder_ == null) {
          result.device_ = device_;
        } else {
          result.device_ = deviceBuilder_.build();
        }
        if (authBuilder_ == null) {
          result.auth_ = auth_;
        } else {
          result.auth_ = authBuilder_.build();
        }
        result.updateIntervalSeconds_ = updateIntervalSeconds_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof smarthome.climate.Climate.ClimateStreamRequest) {
          return mergeFrom((smarthome.climate.Climate.ClimateStreamRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(smarthome.climate.Climate.ClimateStreamRequest other) {
        if (other == smarthome.climate.Climate.ClimateStreamRequest.getDefaultInstance()) return this;
        if (other.hasDevice()) {
          mergeDevice(other.getDevice());
        }
        if (other.hasAuth()) {
          mergeAuth(other.getAuth());
        }
        if (other.getUpdateIntervalSeconds() != 0) {
          setUpdateIntervalSeconds(other.getUpdateIntervalSeconds());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        smarthome.climate.Climate.ClimateStreamRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (smarthome.climate.Climate.ClimateStreamRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private smarthome.common.Common.Device device_;
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Device, smarthome.common.Common.Device.Builder, smarthome.common.Common.DeviceOrBuilder> deviceBuilder_;
      /**
       * <pre>
       * Device to monitor
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       * @return Whether the device field is set.
       */
      public boolean hasDevice() {
        return deviceBuilder_ != null || device_ != null;
      }
      /**
       * <pre>
       * Device to monitor
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       * @return The device.
       */
      public smarthome.common.Common.Device getDevice() {
        if (deviceBuilder_ == null) {
          return device_ == null ? smarthome.common.Common.Device.getDefaultInstance() : device_;
        } else {
          return deviceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Device to monitor
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder setDevice(smarthome.common.Common.Device value) {
        if (deviceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          device_ = value;
          onChanged();
        } else {
          deviceBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Device to monitor
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder setDevice(
          smarthome.common.Common.Device.Builder builderForValue) {
        if (deviceBuilder_ == null) {
          device_ = builderForValue.build();
          onChanged();
        } else {
          deviceBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Device to monitor
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder mergeDevice(smarthome.common.Common.Device value) {
        if (deviceBuilder_ == null) {
          if (device_ != null) {
            device_ =
              smarthome.common.Common.Device.newBuilder(device_).mergeFrom(value).buildPartial();
          } else {
            device_ = value;
          }
          onChanged();
        } else {
          deviceBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Device to monitor
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder clearDevice() {
        if (deviceBuilder_ == null) {
          device_ = null;
          onChanged();
        } else {
          device_ = null;
          deviceBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Device to monitor
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public smarthome.common.Common.Device.Builder getDeviceBuilder() {
        
        onChanged();
        return getDeviceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Device to monitor
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public smarthome.common.Common.DeviceOrBuilder getDeviceOrBuilder() {
        if (deviceBuilder_ != null) {
          return deviceBuilder_.getMessageOrBuilder();
        } else {
          return device_ == null ?
              smarthome.common.Common.Device.getDefaultInstance() : device_;
        }
      }
      /**
       * <pre>
       * Device to monitor
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Device, smarthome.common.Common.Device.Builder, smarthome.common.Common.DeviceOrBuilder> 
          getDeviceFieldBuilder() {
        if (deviceBuilder_ == null) {
          deviceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              smarthome.common.Common.Device, smarthome.common.Common.Device.Builder, smarthome.common.Common.DeviceOrBuilder>(
                  getDevice(),
                  getParentForChildren(),
                  isClean());
          device_ = null;
        }
        return deviceBuilder_;
      }

      private smarthome.common.Common.Auth auth_;
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Auth, smarthome.common.Common.Auth.Builder, smarthome.common.Common.AuthOrBuilder> authBuilder_;
      /**
       * <pre>
       * Auth token for verification
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       * @return Whether the auth field is set.
       */
      public boolean hasAuth() {
        return authBuilder_ != null || auth_ != null;
      }
      /**
       * <pre>
       * Auth token for verification
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       * @return The auth.
       */
      public smarthome.common.Common.Auth getAuth() {
        if (authBuilder_ == null) {
          return auth_ == null ? smarthome.common.Common.Auth.getDefaultInstance() : auth_;
        } else {
          return authBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Auth token for verification
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public Builder setAuth(smarthome.common.Common.Auth value) {
        if (authBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          auth_ = value;
          onChanged();
        } else {
          authBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Auth token for verification
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public Builder setAuth(
          smarthome.common.Common.Auth.Builder builderForValue) {
        if (authBuilder_ == null) {
          auth_ = builderForValue.build();
          onChanged();
        } else {
          authBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Auth token for verification
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public Builder mergeAuth(smarthome.common.Common.Auth value) {
        if (authBuilder_ == null) {
          if (auth_ != null) {
            auth_ =
              smarthome.common.Common.Auth.newBuilder(auth_).mergeFrom(value).buildPartial();
          } else {
            auth_ = value;
          }
          onChanged();
        } else {
          authBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Auth token for verification
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public Builder clearAuth() {
        if (authBuilder_ == null) {
          auth_ = null;
          onChanged();
        } else {
          auth_ = null;
          authBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Auth token for verification
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public smarthome.common.Common.Auth.Builder getAuthBuilder() {
        
        onChanged();
        return getAuthFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Auth token for verification
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public smarthome.common.Common.AuthOrBuilder getAuthOrBuilder() {
        if (authBuilder_ != null) {
          return authBuilder_.getMessageOrBuilder();
        } else {
          return auth_ == null ?
              smarthome.common.Common.Auth.getDefaultInstance() : auth_;
        }
      }
      /**
       * <pre>
       * Auth token for verification
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Auth, smarthome.common.Common.Auth.Builder, smarthome.common.Common.AuthOrBuilder> 
          getAuthFieldBuilder() {
        if (authBuilder_ == null) {
          authBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              smarthome.common.Common.Auth, smarthome.common.Common.Auth.Builder, smarthome.common.Common.AuthOrBuilder>(
                  getAuth(),
                  getParentForChildren(),
                  isClean());
          auth_ = null;
        }
        return authBuilder_;
      }

      private int updateIntervalSeconds_ ;
      /**
       * <pre>
       * Frequency of updates in seconds
       * </pre>
       *
       * <code>int32 update_interval_seconds = 3;</code>
       * @return The updateIntervalSeconds.
       */
      @java.lang.Override
      public int getUpdateIntervalSeconds() {
        return updateIntervalSeconds_;
      }
      /**
       * <pre>
       * Frequency of updates in seconds
       * </pre>
       *
       * <code>int32 update_interval_seconds = 3;</code>
       * @param value The updateIntervalSeconds to set.
       * @return This builder for chaining.
       */
      public Builder setUpdateIntervalSeconds(int value) {
        
        updateIntervalSeconds_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Frequency of updates in seconds
       * </pre>
       *
       * <code>int32 update_interval_seconds = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearUpdateIntervalSeconds() {
        
        updateIntervalSeconds_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:smarthome.climate.ClimateStreamRequest)
    }

    // @@protoc_insertion_point(class_scope:smarthome.climate.ClimateStreamRequest)
    private static final smarthome.climate.Climate.ClimateStreamRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new smarthome.climate.Climate.ClimateStreamRequest();
    }

    public static smarthome.climate.Climate.ClimateStreamRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ClimateStreamRequest>
        PARSER = new com.google.protobuf.AbstractParser<ClimateStreamRequest>() {
      @java.lang.Override
      public ClimateStreamRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ClimateStreamRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ClimateStreamRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ClimateStreamRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public smarthome.climate.Climate.ClimateStreamRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ClimateUpdateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:smarthome.climate.ClimateUpdate)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Current temperature at time of update
     * </pre>
     *
     * <code>float temperature = 1;</code>
     * @return The temperature.
     */
    float getTemperature();

    /**
     * <pre>
     * Current humidity at time of update
     * </pre>
     *
     * <code>float humidity = 2;</code>
     * @return The humidity.
     */
    float getHumidity();

    /**
     * <pre>
     * Epoch timestamp of the update
     * </pre>
     *
     * <code>int64 timestamp = 3;</code>
     * @return The timestamp.
     */
    long getTimestamp();
  }
  /**
   * <pre>
   * Message structure for each streamed climate update
   * </pre>
   *
   * Protobuf type {@code smarthome.climate.ClimateUpdate}
   */
  public static final class ClimateUpdate extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:smarthome.climate.ClimateUpdate)
      ClimateUpdateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ClimateUpdate.newBuilder() to construct.
    private ClimateUpdate(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ClimateUpdate() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ClimateUpdate();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ClimateUpdate(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 13: {

              temperature_ = input.readFloat();
              break;
            }
            case 21: {

              humidity_ = input.readFloat();
              break;
            }
            case 24: {

              timestamp_ = input.readInt64();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return smarthome.climate.Climate.internal_static_smarthome_climate_ClimateUpdate_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return smarthome.climate.Climate.internal_static_smarthome_climate_ClimateUpdate_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              smarthome.climate.Climate.ClimateUpdate.class, smarthome.climate.Climate.ClimateUpdate.Builder.class);
    }

    public static final int TEMPERATURE_FIELD_NUMBER = 1;
    private float temperature_;
    /**
     * <pre>
     * Current temperature at time of update
     * </pre>
     *
     * <code>float temperature = 1;</code>
     * @return The temperature.
     */
    @java.lang.Override
    public float getTemperature() {
      return temperature_;
    }

    public static final int HUMIDITY_FIELD_NUMBER = 2;
    private float humidity_;
    /**
     * <pre>
     * Current humidity at time of update
     * </pre>
     *
     * <code>float humidity = 2;</code>
     * @return The humidity.
     */
    @java.lang.Override
    public float getHumidity() {
      return humidity_;
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 3;
    private long timestamp_;
    /**
     * <pre>
     * Epoch timestamp of the update
     * </pre>
     *
     * <code>int64 timestamp = 3;</code>
     * @return The timestamp.
     */
    @java.lang.Override
    public long getTimestamp() {
      return timestamp_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (java.lang.Float.floatToRawIntBits(temperature_) != 0) {
        output.writeFloat(1, temperature_);
      }
      if (java.lang.Float.floatToRawIntBits(humidity_) != 0) {
        output.writeFloat(2, humidity_);
      }
      if (timestamp_ != 0L) {
        output.writeInt64(3, timestamp_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (java.lang.Float.floatToRawIntBits(temperature_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, temperature_);
      }
      if (java.lang.Float.floatToRawIntBits(humidity_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, humidity_);
      }
      if (timestamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, timestamp_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof smarthome.climate.Climate.ClimateUpdate)) {
        return super.equals(obj);
      }
      smarthome.climate.Climate.ClimateUpdate other = (smarthome.climate.Climate.ClimateUpdate) obj;

      if (java.lang.Float.floatToIntBits(getTemperature())
          != java.lang.Float.floatToIntBits(
              other.getTemperature())) return false;
      if (java.lang.Float.floatToIntBits(getHumidity())
          != java.lang.Float.floatToIntBits(
              other.getHumidity())) return false;
      if (getTimestamp()
          != other.getTimestamp()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TEMPERATURE_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getTemperature());
      hash = (37 * hash) + HUMIDITY_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getHumidity());
      hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimestamp());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static smarthome.climate.Climate.ClimateUpdate parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.climate.Climate.ClimateUpdate parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.climate.Climate.ClimateUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.climate.Climate.ClimateUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.climate.Climate.ClimateUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.climate.Climate.ClimateUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.climate.Climate.ClimateUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smarthome.climate.Climate.ClimateUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static smarthome.climate.Climate.ClimateUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static smarthome.climate.Climate.ClimateUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static smarthome.climate.Climate.ClimateUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smarthome.climate.Climate.ClimateUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(smarthome.climate.Climate.ClimateUpdate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Message structure for each streamed climate update
     * </pre>
     *
     * Protobuf type {@code smarthome.climate.ClimateUpdate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:smarthome.climate.ClimateUpdate)
        smarthome.climate.Climate.ClimateUpdateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return smarthome.climate.Climate.internal_static_smarthome_climate_ClimateUpdate_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return smarthome.climate.Climate.internal_static_smarthome_climate_ClimateUpdate_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                smarthome.climate.Climate.ClimateUpdate.class, smarthome.climate.Climate.ClimateUpdate.Builder.class);
      }

      // Construct using smarthome.climate.Climate.ClimateUpdate.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        temperature_ = 0F;

        humidity_ = 0F;

        timestamp_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return smarthome.climate.Climate.internal_static_smarthome_climate_ClimateUpdate_descriptor;
      }

      @java.lang.Override
      public smarthome.climate.Climate.ClimateUpdate getDefaultInstanceForType() {
        return smarthome.climate.Climate.ClimateUpdate.getDefaultInstance();
      }

      @java.lang.Override
      public smarthome.climate.Climate.ClimateUpdate build() {
        smarthome.climate.Climate.ClimateUpdate result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public smarthome.climate.Climate.ClimateUpdate buildPartial() {
        smarthome.climate.Climate.ClimateUpdate result = new smarthome.climate.Climate.ClimateUpdate(this);
        result.temperature_ = temperature_;
        result.humidity_ = humidity_;
        result.timestamp_ = timestamp_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof smarthome.climate.Climate.ClimateUpdate) {
          return mergeFrom((smarthome.climate.Climate.ClimateUpdate)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(smarthome.climate.Climate.ClimateUpdate other) {
        if (other == smarthome.climate.Climate.ClimateUpdate.getDefaultInstance()) return this;
        if (other.getTemperature() != 0F) {
          setTemperature(other.getTemperature());
        }
        if (other.getHumidity() != 0F) {
          setHumidity(other.getHumidity());
        }
        if (other.getTimestamp() != 0L) {
          setTimestamp(other.getTimestamp());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        smarthome.climate.Climate.ClimateUpdate parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (smarthome.climate.Climate.ClimateUpdate) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private float temperature_ ;
      /**
       * <pre>
       * Current temperature at time of update
       * </pre>
       *
       * <code>float temperature = 1;</code>
       * @return The temperature.
       */
      @java.lang.Override
      public float getTemperature() {
        return temperature_;
      }
      /**
       * <pre>
       * Current temperature at time of update
       * </pre>
       *
       * <code>float temperature = 1;</code>
       * @param value The temperature to set.
       * @return This builder for chaining.
       */
      public Builder setTemperature(float value) {
        
        temperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Current temperature at time of update
       * </pre>
       *
       * <code>float temperature = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearTemperature() {
        
        temperature_ = 0F;
        onChanged();
        return this;
      }

      private float humidity_ ;
      /**
       * <pre>
       * Current humidity at time of update
       * </pre>
       *
       * <code>float humidity = 2;</code>
       * @return The humidity.
       */
      @java.lang.Override
      public float getHumidity() {
        return humidity_;
      }
      /**
       * <pre>
       * Current humidity at time of update
       * </pre>
       *
       * <code>float humidity = 2;</code>
       * @param value The humidity to set.
       * @return This builder for chaining.
       */
      public Builder setHumidity(float value) {
        
        humidity_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Current humidity at time of update
       * </pre>
       *
       * <code>float humidity = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearHumidity() {
        
        humidity_ = 0F;
        onChanged();
        return this;
      }

      private long timestamp_ ;
      /**
       * <pre>
       * Epoch timestamp of the update
       * </pre>
       *
       * <code>int64 timestamp = 3;</code>
       * @return The timestamp.
       */
      @java.lang.Override
      public long getTimestamp() {
        return timestamp_;
      }
      /**
       * <pre>
       * Epoch timestamp of the update
       * </pre>
       *
       * <code>int64 timestamp = 3;</code>
       * @param value The timestamp to set.
       * @return This builder for chaining.
       */
      public Builder setTimestamp(long value) {
        
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Epoch timestamp of the update
       * </pre>
       *
       * <code>int64 timestamp = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimestamp() {
        
        timestamp_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:smarthome.climate.ClimateUpdate)
    }

    // @@protoc_insertion_point(class_scope:smarthome.climate.ClimateUpdate)
    private static final smarthome.climate.Climate.ClimateUpdate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new smarthome.climate.Climate.ClimateUpdate();
    }

    public static smarthome.climate.Climate.ClimateUpdate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ClimateUpdate>
        PARSER = new com.google.protobuf.AbstractParser<ClimateUpdate>() {
      @java.lang.Override
      public ClimateUpdate parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ClimateUpdate(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ClimateUpdate> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ClimateUpdate> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public smarthome.climate.Climate.ClimateUpdate getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TemperatureAdjustmentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:smarthome.climate.TemperatureAdjustment)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Device where adjustment should apply
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return Whether the device field is set.
     */
    boolean hasDevice();
    /**
     * <pre>
     * Device where adjustment should apply
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return The device.
     */
    smarthome.common.Common.Device getDevice();
    /**
     * <pre>
     * Device where adjustment should apply
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     */
    smarthome.common.Common.DeviceOrBuilder getDeviceOrBuilder();

    /**
     * <pre>
     * Authorization for the action
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     * @return Whether the auth field is set.
     */
    boolean hasAuth();
    /**
     * <pre>
     * Authorization for the action
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     * @return The auth.
     */
    smarthome.common.Common.Auth getAuth();
    /**
     * <pre>
     * Authorization for the action
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     */
    smarthome.common.Common.AuthOrBuilder getAuthOrBuilder();

    /**
     * <pre>
     * Temperature change value (positive or negative)
     * </pre>
     *
     * <code>float temperature_delta = 3;</code>
     * @return The temperatureDelta.
     */
    float getTemperatureDelta();
  }
  /**
   * <pre>
   * Client sends a temperature change instruction (e.g., +1 or -0.5 degrees)
   * </pre>
   *
   * Protobuf type {@code smarthome.climate.TemperatureAdjustment}
   */
  public static final class TemperatureAdjustment extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:smarthome.climate.TemperatureAdjustment)
      TemperatureAdjustmentOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TemperatureAdjustment.newBuilder() to construct.
    private TemperatureAdjustment(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TemperatureAdjustment() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TemperatureAdjustment();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TemperatureAdjustment(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              smarthome.common.Common.Device.Builder subBuilder = null;
              if (device_ != null) {
                subBuilder = device_.toBuilder();
              }
              device_ = input.readMessage(smarthome.common.Common.Device.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(device_);
                device_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              smarthome.common.Common.Auth.Builder subBuilder = null;
              if (auth_ != null) {
                subBuilder = auth_.toBuilder();
              }
              auth_ = input.readMessage(smarthome.common.Common.Auth.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(auth_);
                auth_ = subBuilder.buildPartial();
              }

              break;
            }
            case 29: {

              temperatureDelta_ = input.readFloat();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return smarthome.climate.Climate.internal_static_smarthome_climate_TemperatureAdjustment_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return smarthome.climate.Climate.internal_static_smarthome_climate_TemperatureAdjustment_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              smarthome.climate.Climate.TemperatureAdjustment.class, smarthome.climate.Climate.TemperatureAdjustment.Builder.class);
    }

    public static final int DEVICE_FIELD_NUMBER = 1;
    private smarthome.common.Common.Device device_;
    /**
     * <pre>
     * Device where adjustment should apply
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return Whether the device field is set.
     */
    @java.lang.Override
    public boolean hasDevice() {
      return device_ != null;
    }
    /**
     * <pre>
     * Device where adjustment should apply
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return The device.
     */
    @java.lang.Override
    public smarthome.common.Common.Device getDevice() {
      return device_ == null ? smarthome.common.Common.Device.getDefaultInstance() : device_;
    }
    /**
     * <pre>
     * Device where adjustment should apply
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     */
    @java.lang.Override
    public smarthome.common.Common.DeviceOrBuilder getDeviceOrBuilder() {
      return getDevice();
    }

    public static final int AUTH_FIELD_NUMBER = 2;
    private smarthome.common.Common.Auth auth_;
    /**
     * <pre>
     * Authorization for the action
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     * @return Whether the auth field is set.
     */
    @java.lang.Override
    public boolean hasAuth() {
      return auth_ != null;
    }
    /**
     * <pre>
     * Authorization for the action
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     * @return The auth.
     */
    @java.lang.Override
    public smarthome.common.Common.Auth getAuth() {
      return auth_ == null ? smarthome.common.Common.Auth.getDefaultInstance() : auth_;
    }
    /**
     * <pre>
     * Authorization for the action
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     */
    @java.lang.Override
    public smarthome.common.Common.AuthOrBuilder getAuthOrBuilder() {
      return getAuth();
    }

    public static final int TEMPERATURE_DELTA_FIELD_NUMBER = 3;
    private float temperatureDelta_;
    /**
     * <pre>
     * Temperature change value (positive or negative)
     * </pre>
     *
     * <code>float temperature_delta = 3;</code>
     * @return The temperatureDelta.
     */
    @java.lang.Override
    public float getTemperatureDelta() {
      return temperatureDelta_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (device_ != null) {
        output.writeMessage(1, getDevice());
      }
      if (auth_ != null) {
        output.writeMessage(2, getAuth());
      }
      if (java.lang.Float.floatToRawIntBits(temperatureDelta_) != 0) {
        output.writeFloat(3, temperatureDelta_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (device_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getDevice());
      }
      if (auth_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getAuth());
      }
      if (java.lang.Float.floatToRawIntBits(temperatureDelta_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, temperatureDelta_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof smarthome.climate.Climate.TemperatureAdjustment)) {
        return super.equals(obj);
      }
      smarthome.climate.Climate.TemperatureAdjustment other = (smarthome.climate.Climate.TemperatureAdjustment) obj;

      if (hasDevice() != other.hasDevice()) return false;
      if (hasDevice()) {
        if (!getDevice()
            .equals(other.getDevice())) return false;
      }
      if (hasAuth() != other.hasAuth()) return false;
      if (hasAuth()) {
        if (!getAuth()
            .equals(other.getAuth())) return false;
      }
      if (java.lang.Float.floatToIntBits(getTemperatureDelta())
          != java.lang.Float.floatToIntBits(
              other.getTemperatureDelta())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasDevice()) {
        hash = (37 * hash) + DEVICE_FIELD_NUMBER;
        hash = (53 * hash) + getDevice().hashCode();
      }
      if (hasAuth()) {
        hash = (37 * hash) + AUTH_FIELD_NUMBER;
        hash = (53 * hash) + getAuth().hashCode();
      }
      hash = (37 * hash) + TEMPERATURE_DELTA_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getTemperatureDelta());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static smarthome.climate.Climate.TemperatureAdjustment parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.climate.Climate.TemperatureAdjustment parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.climate.Climate.TemperatureAdjustment parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.climate.Climate.TemperatureAdjustment parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.climate.Climate.TemperatureAdjustment parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.climate.Climate.TemperatureAdjustment parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.climate.Climate.TemperatureAdjustment parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smarthome.climate.Climate.TemperatureAdjustment parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static smarthome.climate.Climate.TemperatureAdjustment parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static smarthome.climate.Climate.TemperatureAdjustment parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static smarthome.climate.Climate.TemperatureAdjustment parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smarthome.climate.Climate.TemperatureAdjustment parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(smarthome.climate.Climate.TemperatureAdjustment prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Client sends a temperature change instruction (e.g., +1 or -0.5 degrees)
     * </pre>
     *
     * Protobuf type {@code smarthome.climate.TemperatureAdjustment}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:smarthome.climate.TemperatureAdjustment)
        smarthome.climate.Climate.TemperatureAdjustmentOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return smarthome.climate.Climate.internal_static_smarthome_climate_TemperatureAdjustment_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return smarthome.climate.Climate.internal_static_smarthome_climate_TemperatureAdjustment_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                smarthome.climate.Climate.TemperatureAdjustment.class, smarthome.climate.Climate.TemperatureAdjustment.Builder.class);
      }

      // Construct using smarthome.climate.Climate.TemperatureAdjustment.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (deviceBuilder_ == null) {
          device_ = null;
        } else {
          device_ = null;
          deviceBuilder_ = null;
        }
        if (authBuilder_ == null) {
          auth_ = null;
        } else {
          auth_ = null;
          authBuilder_ = null;
        }
        temperatureDelta_ = 0F;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return smarthome.climate.Climate.internal_static_smarthome_climate_TemperatureAdjustment_descriptor;
      }

      @java.lang.Override
      public smarthome.climate.Climate.TemperatureAdjustment getDefaultInstanceForType() {
        return smarthome.climate.Climate.TemperatureAdjustment.getDefaultInstance();
      }

      @java.lang.Override
      public smarthome.climate.Climate.TemperatureAdjustment build() {
        smarthome.climate.Climate.TemperatureAdjustment result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public smarthome.climate.Climate.TemperatureAdjustment buildPartial() {
        smarthome.climate.Climate.TemperatureAdjustment result = new smarthome.climate.Climate.TemperatureAdjustment(this);
        if (deviceBuilder_ == null) {
          result.device_ = device_;
        } else {
          result.device_ = deviceBuilder_.build();
        }
        if (authBuilder_ == null) {
          result.auth_ = auth_;
        } else {
          result.auth_ = authBuilder_.build();
        }
        result.temperatureDelta_ = temperatureDelta_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof smarthome.climate.Climate.TemperatureAdjustment) {
          return mergeFrom((smarthome.climate.Climate.TemperatureAdjustment)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(smarthome.climate.Climate.TemperatureAdjustment other) {
        if (other == smarthome.climate.Climate.TemperatureAdjustment.getDefaultInstance()) return this;
        if (other.hasDevice()) {
          mergeDevice(other.getDevice());
        }
        if (other.hasAuth()) {
          mergeAuth(other.getAuth());
        }
        if (other.getTemperatureDelta() != 0F) {
          setTemperatureDelta(other.getTemperatureDelta());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        smarthome.climate.Climate.TemperatureAdjustment parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (smarthome.climate.Climate.TemperatureAdjustment) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private smarthome.common.Common.Device device_;
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Device, smarthome.common.Common.Device.Builder, smarthome.common.Common.DeviceOrBuilder> deviceBuilder_;
      /**
       * <pre>
       * Device where adjustment should apply
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       * @return Whether the device field is set.
       */
      public boolean hasDevice() {
        return deviceBuilder_ != null || device_ != null;
      }
      /**
       * <pre>
       * Device where adjustment should apply
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       * @return The device.
       */
      public smarthome.common.Common.Device getDevice() {
        if (deviceBuilder_ == null) {
          return device_ == null ? smarthome.common.Common.Device.getDefaultInstance() : device_;
        } else {
          return deviceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Device where adjustment should apply
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder setDevice(smarthome.common.Common.Device value) {
        if (deviceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          device_ = value;
          onChanged();
        } else {
          deviceBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Device where adjustment should apply
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder setDevice(
          smarthome.common.Common.Device.Builder builderForValue) {
        if (deviceBuilder_ == null) {
          device_ = builderForValue.build();
          onChanged();
        } else {
          deviceBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Device where adjustment should apply
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder mergeDevice(smarthome.common.Common.Device value) {
        if (deviceBuilder_ == null) {
          if (device_ != null) {
            device_ =
              smarthome.common.Common.Device.newBuilder(device_).mergeFrom(value).buildPartial();
          } else {
            device_ = value;
          }
          onChanged();
        } else {
          deviceBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Device where adjustment should apply
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder clearDevice() {
        if (deviceBuilder_ == null) {
          device_ = null;
          onChanged();
        } else {
          device_ = null;
          deviceBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Device where adjustment should apply
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public smarthome.common.Common.Device.Builder getDeviceBuilder() {
        
        onChanged();
        return getDeviceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Device where adjustment should apply
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public smarthome.common.Common.DeviceOrBuilder getDeviceOrBuilder() {
        if (deviceBuilder_ != null) {
          return deviceBuilder_.getMessageOrBuilder();
        } else {
          return device_ == null ?
              smarthome.common.Common.Device.getDefaultInstance() : device_;
        }
      }
      /**
       * <pre>
       * Device where adjustment should apply
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Device, smarthome.common.Common.Device.Builder, smarthome.common.Common.DeviceOrBuilder> 
          getDeviceFieldBuilder() {
        if (deviceBuilder_ == null) {
          deviceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              smarthome.common.Common.Device, smarthome.common.Common.Device.Builder, smarthome.common.Common.DeviceOrBuilder>(
                  getDevice(),
                  getParentForChildren(),
                  isClean());
          device_ = null;
        }
        return deviceBuilder_;
      }

      private smarthome.common.Common.Auth auth_;
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Auth, smarthome.common.Common.Auth.Builder, smarthome.common.Common.AuthOrBuilder> authBuilder_;
      /**
       * <pre>
       * Authorization for the action
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       * @return Whether the auth field is set.
       */
      public boolean hasAuth() {
        return authBuilder_ != null || auth_ != null;
      }
      /**
       * <pre>
       * Authorization for the action
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       * @return The auth.
       */
      public smarthome.common.Common.Auth getAuth() {
        if (authBuilder_ == null) {
          return auth_ == null ? smarthome.common.Common.Auth.getDefaultInstance() : auth_;
        } else {
          return authBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Authorization for the action
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public Builder setAuth(smarthome.common.Common.Auth value) {
        if (authBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          auth_ = value;
          onChanged();
        } else {
          authBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Authorization for the action
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public Builder setAuth(
          smarthome.common.Common.Auth.Builder builderForValue) {
        if (authBuilder_ == null) {
          auth_ = builderForValue.build();
          onChanged();
        } else {
          authBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Authorization for the action
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public Builder mergeAuth(smarthome.common.Common.Auth value) {
        if (authBuilder_ == null) {
          if (auth_ != null) {
            auth_ =
              smarthome.common.Common.Auth.newBuilder(auth_).mergeFrom(value).buildPartial();
          } else {
            auth_ = value;
          }
          onChanged();
        } else {
          authBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Authorization for the action
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public Builder clearAuth() {
        if (authBuilder_ == null) {
          auth_ = null;
          onChanged();
        } else {
          auth_ = null;
          authBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Authorization for the action
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public smarthome.common.Common.Auth.Builder getAuthBuilder() {
        
        onChanged();
        return getAuthFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Authorization for the action
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public smarthome.common.Common.AuthOrBuilder getAuthOrBuilder() {
        if (authBuilder_ != null) {
          return authBuilder_.getMessageOrBuilder();
        } else {
          return auth_ == null ?
              smarthome.common.Common.Auth.getDefaultInstance() : auth_;
        }
      }
      /**
       * <pre>
       * Authorization for the action
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Auth, smarthome.common.Common.Auth.Builder, smarthome.common.Common.AuthOrBuilder> 
          getAuthFieldBuilder() {
        if (authBuilder_ == null) {
          authBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              smarthome.common.Common.Auth, smarthome.common.Common.Auth.Builder, smarthome.common.Common.AuthOrBuilder>(
                  getAuth(),
                  getParentForChildren(),
                  isClean());
          auth_ = null;
        }
        return authBuilder_;
      }

      private float temperatureDelta_ ;
      /**
       * <pre>
       * Temperature change value (positive or negative)
       * </pre>
       *
       * <code>float temperature_delta = 3;</code>
       * @return The temperatureDelta.
       */
      @java.lang.Override
      public float getTemperatureDelta() {
        return temperatureDelta_;
      }
      /**
       * <pre>
       * Temperature change value (positive or negative)
       * </pre>
       *
       * <code>float temperature_delta = 3;</code>
       * @param value The temperatureDelta to set.
       * @return This builder for chaining.
       */
      public Builder setTemperatureDelta(float value) {
        
        temperatureDelta_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Temperature change value (positive or negative)
       * </pre>
       *
       * <code>float temperature_delta = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTemperatureDelta() {
        
        temperatureDelta_ = 0F;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:smarthome.climate.TemperatureAdjustment)
    }

    // @@protoc_insertion_point(class_scope:smarthome.climate.TemperatureAdjustment)
    private static final smarthome.climate.Climate.TemperatureAdjustment DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new smarthome.climate.Climate.TemperatureAdjustment();
    }

    public static smarthome.climate.Climate.TemperatureAdjustment getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TemperatureAdjustment>
        PARSER = new com.google.protobuf.AbstractParser<TemperatureAdjustment>() {
      @java.lang.Override
      public TemperatureAdjustment parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TemperatureAdjustment(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TemperatureAdjustment> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TemperatureAdjustment> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public smarthome.climate.Climate.TemperatureAdjustment getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TemperatureAdjustmentAckOrBuilder extends
      // @@protoc_insertion_point(interface_extends:smarthome.climate.TemperatureAdjustmentAck)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * New current temperature after adjustment
     * </pre>
     *
     * <code>float current_temperature = 1;</code>
     * @return The currentTemperature.
     */
    float getCurrentTemperature();

    /**
     * <pre>
     * Updated target temperature
     * </pre>
     *
     * <code>float target_temperature = 2;</code>
     * @return The targetTemperature.
     */
    float getTargetTemperature();

    /**
     * <pre>
     * Result of the operation (success/failure)
     * </pre>
     *
     * <code>.smarthome.common.OperationStatus status = 3;</code>
     * @return The enum numeric value on the wire for status.
     */
    int getStatusValue();
    /**
     * <pre>
     * Result of the operation (success/failure)
     * </pre>
     *
     * <code>.smarthome.common.OperationStatus status = 3;</code>
     * @return The status.
     */
    smarthome.common.Common.OperationStatus getStatus();
  }
  /**
   * <pre>
   * Server acknowledges a temperature adjustment
   * </pre>
   *
   * Protobuf type {@code smarthome.climate.TemperatureAdjustmentAck}
   */
  public static final class TemperatureAdjustmentAck extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:smarthome.climate.TemperatureAdjustmentAck)
      TemperatureAdjustmentAckOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TemperatureAdjustmentAck.newBuilder() to construct.
    private TemperatureAdjustmentAck(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TemperatureAdjustmentAck() {
      status_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TemperatureAdjustmentAck();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TemperatureAdjustmentAck(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 13: {

              currentTemperature_ = input.readFloat();
              break;
            }
            case 21: {

              targetTemperature_ = input.readFloat();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();

              status_ = rawValue;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return smarthome.climate.Climate.internal_static_smarthome_climate_TemperatureAdjustmentAck_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return smarthome.climate.Climate.internal_static_smarthome_climate_TemperatureAdjustmentAck_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              smarthome.climate.Climate.TemperatureAdjustmentAck.class, smarthome.climate.Climate.TemperatureAdjustmentAck.Builder.class);
    }

    public static final int CURRENT_TEMPERATURE_FIELD_NUMBER = 1;
    private float currentTemperature_;
    /**
     * <pre>
     * New current temperature after adjustment
     * </pre>
     *
     * <code>float current_temperature = 1;</code>
     * @return The currentTemperature.
     */
    @java.lang.Override
    public float getCurrentTemperature() {
      return currentTemperature_;
    }

    public static final int TARGET_TEMPERATURE_FIELD_NUMBER = 2;
    private float targetTemperature_;
    /**
     * <pre>
     * Updated target temperature
     * </pre>
     *
     * <code>float target_temperature = 2;</code>
     * @return The targetTemperature.
     */
    @java.lang.Override
    public float getTargetTemperature() {
      return targetTemperature_;
    }

    public static final int STATUS_FIELD_NUMBER = 3;
    private int status_;
    /**
     * <pre>
     * Result of the operation (success/failure)
     * </pre>
     *
     * <code>.smarthome.common.OperationStatus status = 3;</code>
     * @return The enum numeric value on the wire for status.
     */
    @java.lang.Override public int getStatusValue() {
      return status_;
    }
    /**
     * <pre>
     * Result of the operation (success/failure)
     * </pre>
     *
     * <code>.smarthome.common.OperationStatus status = 3;</code>
     * @return The status.
     */
    @java.lang.Override public smarthome.common.Common.OperationStatus getStatus() {
      @SuppressWarnings("deprecation")
      smarthome.common.Common.OperationStatus result = smarthome.common.Common.OperationStatus.valueOf(status_);
      return result == null ? smarthome.common.Common.OperationStatus.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (java.lang.Float.floatToRawIntBits(currentTemperature_) != 0) {
        output.writeFloat(1, currentTemperature_);
      }
      if (java.lang.Float.floatToRawIntBits(targetTemperature_) != 0) {
        output.writeFloat(2, targetTemperature_);
      }
      if (status_ != smarthome.common.Common.OperationStatus.SUCCESS.getNumber()) {
        output.writeEnum(3, status_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (java.lang.Float.floatToRawIntBits(currentTemperature_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, currentTemperature_);
      }
      if (java.lang.Float.floatToRawIntBits(targetTemperature_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, targetTemperature_);
      }
      if (status_ != smarthome.common.Common.OperationStatus.SUCCESS.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, status_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof smarthome.climate.Climate.TemperatureAdjustmentAck)) {
        return super.equals(obj);
      }
      smarthome.climate.Climate.TemperatureAdjustmentAck other = (smarthome.climate.Climate.TemperatureAdjustmentAck) obj;

      if (java.lang.Float.floatToIntBits(getCurrentTemperature())
          != java.lang.Float.floatToIntBits(
              other.getCurrentTemperature())) return false;
      if (java.lang.Float.floatToIntBits(getTargetTemperature())
          != java.lang.Float.floatToIntBits(
              other.getTargetTemperature())) return false;
      if (status_ != other.status_) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CURRENT_TEMPERATURE_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getCurrentTemperature());
      hash = (37 * hash) + TARGET_TEMPERATURE_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getTargetTemperature());
      hash = (37 * hash) + STATUS_FIELD_NUMBER;
      hash = (53 * hash) + status_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static smarthome.climate.Climate.TemperatureAdjustmentAck parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.climate.Climate.TemperatureAdjustmentAck parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.climate.Climate.TemperatureAdjustmentAck parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.climate.Climate.TemperatureAdjustmentAck parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.climate.Climate.TemperatureAdjustmentAck parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.climate.Climate.TemperatureAdjustmentAck parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.climate.Climate.TemperatureAdjustmentAck parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smarthome.climate.Climate.TemperatureAdjustmentAck parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static smarthome.climate.Climate.TemperatureAdjustmentAck parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static smarthome.climate.Climate.TemperatureAdjustmentAck parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static smarthome.climate.Climate.TemperatureAdjustmentAck parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smarthome.climate.Climate.TemperatureAdjustmentAck parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(smarthome.climate.Climate.TemperatureAdjustmentAck prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Server acknowledges a temperature adjustment
     * </pre>
     *
     * Protobuf type {@code smarthome.climate.TemperatureAdjustmentAck}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:smarthome.climate.TemperatureAdjustmentAck)
        smarthome.climate.Climate.TemperatureAdjustmentAckOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return smarthome.climate.Climate.internal_static_smarthome_climate_TemperatureAdjustmentAck_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return smarthome.climate.Climate.internal_static_smarthome_climate_TemperatureAdjustmentAck_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                smarthome.climate.Climate.TemperatureAdjustmentAck.class, smarthome.climate.Climate.TemperatureAdjustmentAck.Builder.class);
      }

      // Construct using smarthome.climate.Climate.TemperatureAdjustmentAck.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        currentTemperature_ = 0F;

        targetTemperature_ = 0F;

        status_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return smarthome.climate.Climate.internal_static_smarthome_climate_TemperatureAdjustmentAck_descriptor;
      }

      @java.lang.Override
      public smarthome.climate.Climate.TemperatureAdjustmentAck getDefaultInstanceForType() {
        return smarthome.climate.Climate.TemperatureAdjustmentAck.getDefaultInstance();
      }

      @java.lang.Override
      public smarthome.climate.Climate.TemperatureAdjustmentAck build() {
        smarthome.climate.Climate.TemperatureAdjustmentAck result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public smarthome.climate.Climate.TemperatureAdjustmentAck buildPartial() {
        smarthome.climate.Climate.TemperatureAdjustmentAck result = new smarthome.climate.Climate.TemperatureAdjustmentAck(this);
        result.currentTemperature_ = currentTemperature_;
        result.targetTemperature_ = targetTemperature_;
        result.status_ = status_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof smarthome.climate.Climate.TemperatureAdjustmentAck) {
          return mergeFrom((smarthome.climate.Climate.TemperatureAdjustmentAck)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(smarthome.climate.Climate.TemperatureAdjustmentAck other) {
        if (other == smarthome.climate.Climate.TemperatureAdjustmentAck.getDefaultInstance()) return this;
        if (other.getCurrentTemperature() != 0F) {
          setCurrentTemperature(other.getCurrentTemperature());
        }
        if (other.getTargetTemperature() != 0F) {
          setTargetTemperature(other.getTargetTemperature());
        }
        if (other.status_ != 0) {
          setStatusValue(other.getStatusValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        smarthome.climate.Climate.TemperatureAdjustmentAck parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (smarthome.climate.Climate.TemperatureAdjustmentAck) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private float currentTemperature_ ;
      /**
       * <pre>
       * New current temperature after adjustment
       * </pre>
       *
       * <code>float current_temperature = 1;</code>
       * @return The currentTemperature.
       */
      @java.lang.Override
      public float getCurrentTemperature() {
        return currentTemperature_;
      }
      /**
       * <pre>
       * New current temperature after adjustment
       * </pre>
       *
       * <code>float current_temperature = 1;</code>
       * @param value The currentTemperature to set.
       * @return This builder for chaining.
       */
      public Builder setCurrentTemperature(float value) {
        
        currentTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * New current temperature after adjustment
       * </pre>
       *
       * <code>float current_temperature = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearCurrentTemperature() {
        
        currentTemperature_ = 0F;
        onChanged();
        return this;
      }

      private float targetTemperature_ ;
      /**
       * <pre>
       * Updated target temperature
       * </pre>
       *
       * <code>float target_temperature = 2;</code>
       * @return The targetTemperature.
       */
      @java.lang.Override
      public float getTargetTemperature() {
        return targetTemperature_;
      }
      /**
       * <pre>
       * Updated target temperature
       * </pre>
       *
       * <code>float target_temperature = 2;</code>
       * @param value The targetTemperature to set.
       * @return This builder for chaining.
       */
      public Builder setTargetTemperature(float value) {
        
        targetTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Updated target temperature
       * </pre>
       *
       * <code>float target_temperature = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearTargetTemperature() {
        
        targetTemperature_ = 0F;
        onChanged();
        return this;
      }

      private int status_ = 0;
      /**
       * <pre>
       * Result of the operation (success/failure)
       * </pre>
       *
       * <code>.smarthome.common.OperationStatus status = 3;</code>
       * @return The enum numeric value on the wire for status.
       */
      @java.lang.Override public int getStatusValue() {
        return status_;
      }
      /**
       * <pre>
       * Result of the operation (success/failure)
       * </pre>
       *
       * <code>.smarthome.common.OperationStatus status = 3;</code>
       * @param value The enum numeric value on the wire for status to set.
       * @return This builder for chaining.
       */
      public Builder setStatusValue(int value) {
        
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Result of the operation (success/failure)
       * </pre>
       *
       * <code>.smarthome.common.OperationStatus status = 3;</code>
       * @return The status.
       */
      @java.lang.Override
      public smarthome.common.Common.OperationStatus getStatus() {
        @SuppressWarnings("deprecation")
        smarthome.common.Common.OperationStatus result = smarthome.common.Common.OperationStatus.valueOf(status_);
        return result == null ? smarthome.common.Common.OperationStatus.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Result of the operation (success/failure)
       * </pre>
       *
       * <code>.smarthome.common.OperationStatus status = 3;</code>
       * @param value The status to set.
       * @return This builder for chaining.
       */
      public Builder setStatus(smarthome.common.Common.OperationStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        status_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Result of the operation (success/failure)
       * </pre>
       *
       * <code>.smarthome.common.OperationStatus status = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearStatus() {
        
        status_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:smarthome.climate.TemperatureAdjustmentAck)
    }

    // @@protoc_insertion_point(class_scope:smarthome.climate.TemperatureAdjustmentAck)
    private static final smarthome.climate.Climate.TemperatureAdjustmentAck DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new smarthome.climate.Climate.TemperatureAdjustmentAck();
    }

    public static smarthome.climate.Climate.TemperatureAdjustmentAck getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TemperatureAdjustmentAck>
        PARSER = new com.google.protobuf.AbstractParser<TemperatureAdjustmentAck>() {
      @java.lang.Override
      public TemperatureAdjustmentAck parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TemperatureAdjustmentAck(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TemperatureAdjustmentAck> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TemperatureAdjustmentAck> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public smarthome.climate.Climate.TemperatureAdjustmentAck getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_smarthome_climate_SetTemperatureRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_smarthome_climate_SetTemperatureRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_smarthome_climate_GetTemperatureRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_smarthome_climate_GetTemperatureRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_smarthome_climate_TemperatureResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_smarthome_climate_TemperatureResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_smarthome_climate_ClimateStreamRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_smarthome_climate_ClimateStreamRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_smarthome_climate_ClimateUpdate_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_smarthome_climate_ClimateUpdate_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_smarthome_climate_TemperatureAdjustment_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_smarthome_climate_TemperatureAdjustment_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_smarthome_climate_TemperatureAdjustmentAck_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_smarthome_climate_TemperatureAdjustmentAck_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\rclimate.proto\022\021smarthome.climate\032\014comm" +
      "on.proto\"R\n\025SetTemperatureRequest\022\023\n\013tem" +
      "perature\030\001 \001(\002\022$\n\004auth\030\002 \001(\0132\026.smarthome" +
      ".common.Auth\"g\n\025GetTemperatureRequest\022(\n" +
      "\006device\030\001 \001(\0132\030.smarthome.common.Device\022" +
      "$\n\004auth\030\002 \001(\0132\026.smarthome.common.Auth\"R\n" +
      "\023TemperatureResponse\022\024\n\014current_temp\030\001 \001" +
      "(\002\022\023\n\013target_temp\030\002 \001(\002\022\020\n\010humidity\030\003 \001(" +
      "\002\"\207\001\n\024ClimateStreamRequest\022(\n\006device\030\001 \001" +
      "(\0132\030.smarthome.common.Device\022$\n\004auth\030\002 \001" +
      "(\0132\026.smarthome.common.Auth\022\037\n\027update_int" +
      "erval_seconds\030\003 \001(\005\"I\n\rClimateUpdate\022\023\n\013" +
      "temperature\030\001 \001(\002\022\020\n\010humidity\030\002 \001(\002\022\021\n\tt" +
      "imestamp\030\003 \001(\003\"\202\001\n\025TemperatureAdjustment" +
      "\022(\n\006device\030\001 \001(\0132\030.smarthome.common.Devi" +
      "ce\022$\n\004auth\030\002 \001(\0132\026.smarthome.common.Auth" +
      "\022\031\n\021temperature_delta\030\003 \001(\002\"\206\001\n\030Temperat" +
      "ureAdjustmentAck\022\033\n\023current_temperature\030" +
      "\001 \001(\002\022\032\n\022target_temperature\030\002 \001(\002\0221\n\006sta" +
      "tus\030\003 \001(\0162!.smarthome.common.OperationSt" +
      "atus2\247\003\n\016ClimateService\022\\\n\016SetTemperatur" +
      "e\022(.smarthome.climate.SetTemperatureRequ" +
      "est\032 .smarthome.common.StatusResponse\022b\n" +
      "\016GetTemperature\022(.smarthome.climate.GetT" +
      "emperatureRequest\032&.smarthome.climate.Te" +
      "mperatureResponse\022c\n\024StreamClimateUpdate" +
      "s\022\'.smarthome.climate.ClimateStreamReque" +
      "st\032 .smarthome.climate.ClimateUpdate0\001\022n" +
      "\n\021AdjustTemperature\022(.smarthome.climate." +
      "TemperatureAdjustment\032+.smarthome.climat" +
      "e.TemperatureAdjustmentAck(\0010\001b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          smarthome.common.Common.getDescriptor(),
        });
    internal_static_smarthome_climate_SetTemperatureRequest_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_smarthome_climate_SetTemperatureRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_smarthome_climate_SetTemperatureRequest_descriptor,
        new java.lang.String[] { "Temperature", "Auth", });
    internal_static_smarthome_climate_GetTemperatureRequest_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_smarthome_climate_GetTemperatureRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_smarthome_climate_GetTemperatureRequest_descriptor,
        new java.lang.String[] { "Device", "Auth", });
    internal_static_smarthome_climate_TemperatureResponse_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_smarthome_climate_TemperatureResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_smarthome_climate_TemperatureResponse_descriptor,
        new java.lang.String[] { "CurrentTemp", "TargetTemp", "Humidity", });
    internal_static_smarthome_climate_ClimateStreamRequest_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_smarthome_climate_ClimateStreamRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_smarthome_climate_ClimateStreamRequest_descriptor,
        new java.lang.String[] { "Device", "Auth", "UpdateIntervalSeconds", });
    internal_static_smarthome_climate_ClimateUpdate_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_smarthome_climate_ClimateUpdate_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_smarthome_climate_ClimateUpdate_descriptor,
        new java.lang.String[] { "Temperature", "Humidity", "Timestamp", });
    internal_static_smarthome_climate_TemperatureAdjustment_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_smarthome_climate_TemperatureAdjustment_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_smarthome_climate_TemperatureAdjustment_descriptor,
        new java.lang.String[] { "Device", "Auth", "TemperatureDelta", });
    internal_static_smarthome_climate_TemperatureAdjustmentAck_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_smarthome_climate_TemperatureAdjustmentAck_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_smarthome_climate_TemperatureAdjustmentAck_descriptor,
        new java.lang.String[] { "CurrentTemperature", "TargetTemperature", "Status", });
    smarthome.common.Common.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
