// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lighting.proto

package smarthome.lighting;

public final class Lighting {
  private Lighting() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ToggleRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:smarthome.lighting.ToggleRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Target device to control
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return Whether the device field is set.
     */
    boolean hasDevice();
    /**
     * <pre>
     * Target device to control
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return The device.
     */
    smarthome.common.Common.Device getDevice();
    /**
     * <pre>
     * Target device to control
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     */
    smarthome.common.Common.DeviceOrBuilder getDeviceOrBuilder();

    /**
     * <pre>
     * True = ON, False = OFF
     * </pre>
     *
     * <code>bool on = 2;</code>
     * @return The on.
     */
    boolean getOn();

    /**
     * <pre>
     * Authentication details
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 3;</code>
     * @return Whether the auth field is set.
     */
    boolean hasAuth();
    /**
     * <pre>
     * Authentication details
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 3;</code>
     * @return The auth.
     */
    smarthome.common.Common.Auth getAuth();
    /**
     * <pre>
     * Authentication details
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 3;</code>
     */
    smarthome.common.Common.AuthOrBuilder getAuthOrBuilder();
  }
  /**
   * <pre>
   * Used to toggle a light on or off
   * </pre>
   *
   * Protobuf type {@code smarthome.lighting.ToggleRequest}
   */
  public static final class ToggleRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:smarthome.lighting.ToggleRequest)
      ToggleRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ToggleRequest.newBuilder() to construct.
    private ToggleRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ToggleRequest() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ToggleRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ToggleRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              smarthome.common.Common.Device.Builder subBuilder = null;
              if (device_ != null) {
                subBuilder = device_.toBuilder();
              }
              device_ = input.readMessage(smarthome.common.Common.Device.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(device_);
                device_ = subBuilder.buildPartial();
              }

              break;
            }
            case 16: {

              on_ = input.readBool();
              break;
            }
            case 26: {
              smarthome.common.Common.Auth.Builder subBuilder = null;
              if (auth_ != null) {
                subBuilder = auth_.toBuilder();
              }
              auth_ = input.readMessage(smarthome.common.Common.Auth.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(auth_);
                auth_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return smarthome.lighting.Lighting.internal_static_smarthome_lighting_ToggleRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return smarthome.lighting.Lighting.internal_static_smarthome_lighting_ToggleRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              smarthome.lighting.Lighting.ToggleRequest.class, smarthome.lighting.Lighting.ToggleRequest.Builder.class);
    }

    public static final int DEVICE_FIELD_NUMBER = 1;
    private smarthome.common.Common.Device device_;
    /**
     * <pre>
     * Target device to control
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return Whether the device field is set.
     */
    @java.lang.Override
    public boolean hasDevice() {
      return device_ != null;
    }
    /**
     * <pre>
     * Target device to control
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return The device.
     */
    @java.lang.Override
    public smarthome.common.Common.Device getDevice() {
      return device_ == null ? smarthome.common.Common.Device.getDefaultInstance() : device_;
    }
    /**
     * <pre>
     * Target device to control
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     */
    @java.lang.Override
    public smarthome.common.Common.DeviceOrBuilder getDeviceOrBuilder() {
      return getDevice();
    }

    public static final int ON_FIELD_NUMBER = 2;
    private boolean on_;
    /**
     * <pre>
     * True = ON, False = OFF
     * </pre>
     *
     * <code>bool on = 2;</code>
     * @return The on.
     */
    @java.lang.Override
    public boolean getOn() {
      return on_;
    }

    public static final int AUTH_FIELD_NUMBER = 3;
    private smarthome.common.Common.Auth auth_;
    /**
     * <pre>
     * Authentication details
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 3;</code>
     * @return Whether the auth field is set.
     */
    @java.lang.Override
    public boolean hasAuth() {
      return auth_ != null;
    }
    /**
     * <pre>
     * Authentication details
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 3;</code>
     * @return The auth.
     */
    @java.lang.Override
    public smarthome.common.Common.Auth getAuth() {
      return auth_ == null ? smarthome.common.Common.Auth.getDefaultInstance() : auth_;
    }
    /**
     * <pre>
     * Authentication details
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 3;</code>
     */
    @java.lang.Override
    public smarthome.common.Common.AuthOrBuilder getAuthOrBuilder() {
      return getAuth();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (device_ != null) {
        output.writeMessage(1, getDevice());
      }
      if (on_ != false) {
        output.writeBool(2, on_);
      }
      if (auth_ != null) {
        output.writeMessage(3, getAuth());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (device_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getDevice());
      }
      if (on_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, on_);
      }
      if (auth_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getAuth());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof smarthome.lighting.Lighting.ToggleRequest)) {
        return super.equals(obj);
      }
      smarthome.lighting.Lighting.ToggleRequest other = (smarthome.lighting.Lighting.ToggleRequest) obj;

      if (hasDevice() != other.hasDevice()) return false;
      if (hasDevice()) {
        if (!getDevice()
            .equals(other.getDevice())) return false;
      }
      if (getOn()
          != other.getOn()) return false;
      if (hasAuth() != other.hasAuth()) return false;
      if (hasAuth()) {
        if (!getAuth()
            .equals(other.getAuth())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasDevice()) {
        hash = (37 * hash) + DEVICE_FIELD_NUMBER;
        hash = (53 * hash) + getDevice().hashCode();
      }
      hash = (37 * hash) + ON_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getOn());
      if (hasAuth()) {
        hash = (37 * hash) + AUTH_FIELD_NUMBER;
        hash = (53 * hash) + getAuth().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static smarthome.lighting.Lighting.ToggleRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.lighting.Lighting.ToggleRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.lighting.Lighting.ToggleRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.lighting.Lighting.ToggleRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.lighting.Lighting.ToggleRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.lighting.Lighting.ToggleRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.lighting.Lighting.ToggleRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smarthome.lighting.Lighting.ToggleRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static smarthome.lighting.Lighting.ToggleRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static smarthome.lighting.Lighting.ToggleRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static smarthome.lighting.Lighting.ToggleRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smarthome.lighting.Lighting.ToggleRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(smarthome.lighting.Lighting.ToggleRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Used to toggle a light on or off
     * </pre>
     *
     * Protobuf type {@code smarthome.lighting.ToggleRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:smarthome.lighting.ToggleRequest)
        smarthome.lighting.Lighting.ToggleRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return smarthome.lighting.Lighting.internal_static_smarthome_lighting_ToggleRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return smarthome.lighting.Lighting.internal_static_smarthome_lighting_ToggleRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                smarthome.lighting.Lighting.ToggleRequest.class, smarthome.lighting.Lighting.ToggleRequest.Builder.class);
      }

      // Construct using smarthome.lighting.Lighting.ToggleRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (deviceBuilder_ == null) {
          device_ = null;
        } else {
          device_ = null;
          deviceBuilder_ = null;
        }
        on_ = false;

        if (authBuilder_ == null) {
          auth_ = null;
        } else {
          auth_ = null;
          authBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return smarthome.lighting.Lighting.internal_static_smarthome_lighting_ToggleRequest_descriptor;
      }

      @java.lang.Override
      public smarthome.lighting.Lighting.ToggleRequest getDefaultInstanceForType() {
        return smarthome.lighting.Lighting.ToggleRequest.getDefaultInstance();
      }

      @java.lang.Override
      public smarthome.lighting.Lighting.ToggleRequest build() {
        smarthome.lighting.Lighting.ToggleRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public smarthome.lighting.Lighting.ToggleRequest buildPartial() {
        smarthome.lighting.Lighting.ToggleRequest result = new smarthome.lighting.Lighting.ToggleRequest(this);
        if (deviceBuilder_ == null) {
          result.device_ = device_;
        } else {
          result.device_ = deviceBuilder_.build();
        }
        result.on_ = on_;
        if (authBuilder_ == null) {
          result.auth_ = auth_;
        } else {
          result.auth_ = authBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof smarthome.lighting.Lighting.ToggleRequest) {
          return mergeFrom((smarthome.lighting.Lighting.ToggleRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(smarthome.lighting.Lighting.ToggleRequest other) {
        if (other == smarthome.lighting.Lighting.ToggleRequest.getDefaultInstance()) return this;
        if (other.hasDevice()) {
          mergeDevice(other.getDevice());
        }
        if (other.getOn() != false) {
          setOn(other.getOn());
        }
        if (other.hasAuth()) {
          mergeAuth(other.getAuth());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        smarthome.lighting.Lighting.ToggleRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (smarthome.lighting.Lighting.ToggleRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private smarthome.common.Common.Device device_;
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Device, smarthome.common.Common.Device.Builder, smarthome.common.Common.DeviceOrBuilder> deviceBuilder_;
      /**
       * <pre>
       * Target device to control
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       * @return Whether the device field is set.
       */
      public boolean hasDevice() {
        return deviceBuilder_ != null || device_ != null;
      }
      /**
       * <pre>
       * Target device to control
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       * @return The device.
       */
      public smarthome.common.Common.Device getDevice() {
        if (deviceBuilder_ == null) {
          return device_ == null ? smarthome.common.Common.Device.getDefaultInstance() : device_;
        } else {
          return deviceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Target device to control
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder setDevice(smarthome.common.Common.Device value) {
        if (deviceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          device_ = value;
          onChanged();
        } else {
          deviceBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Target device to control
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder setDevice(
          smarthome.common.Common.Device.Builder builderForValue) {
        if (deviceBuilder_ == null) {
          device_ = builderForValue.build();
          onChanged();
        } else {
          deviceBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Target device to control
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder mergeDevice(smarthome.common.Common.Device value) {
        if (deviceBuilder_ == null) {
          if (device_ != null) {
            device_ =
              smarthome.common.Common.Device.newBuilder(device_).mergeFrom(value).buildPartial();
          } else {
            device_ = value;
          }
          onChanged();
        } else {
          deviceBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Target device to control
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder clearDevice() {
        if (deviceBuilder_ == null) {
          device_ = null;
          onChanged();
        } else {
          device_ = null;
          deviceBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Target device to control
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public smarthome.common.Common.Device.Builder getDeviceBuilder() {
        
        onChanged();
        return getDeviceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Target device to control
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public smarthome.common.Common.DeviceOrBuilder getDeviceOrBuilder() {
        if (deviceBuilder_ != null) {
          return deviceBuilder_.getMessageOrBuilder();
        } else {
          return device_ == null ?
              smarthome.common.Common.Device.getDefaultInstance() : device_;
        }
      }
      /**
       * <pre>
       * Target device to control
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Device, smarthome.common.Common.Device.Builder, smarthome.common.Common.DeviceOrBuilder> 
          getDeviceFieldBuilder() {
        if (deviceBuilder_ == null) {
          deviceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              smarthome.common.Common.Device, smarthome.common.Common.Device.Builder, smarthome.common.Common.DeviceOrBuilder>(
                  getDevice(),
                  getParentForChildren(),
                  isClean());
          device_ = null;
        }
        return deviceBuilder_;
      }

      private boolean on_ ;
      /**
       * <pre>
       * True = ON, False = OFF
       * </pre>
       *
       * <code>bool on = 2;</code>
       * @return The on.
       */
      @java.lang.Override
      public boolean getOn() {
        return on_;
      }
      /**
       * <pre>
       * True = ON, False = OFF
       * </pre>
       *
       * <code>bool on = 2;</code>
       * @param value The on to set.
       * @return This builder for chaining.
       */
      public Builder setOn(boolean value) {
        
        on_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * True = ON, False = OFF
       * </pre>
       *
       * <code>bool on = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearOn() {
        
        on_ = false;
        onChanged();
        return this;
      }

      private smarthome.common.Common.Auth auth_;
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Auth, smarthome.common.Common.Auth.Builder, smarthome.common.Common.AuthOrBuilder> authBuilder_;
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 3;</code>
       * @return Whether the auth field is set.
       */
      public boolean hasAuth() {
        return authBuilder_ != null || auth_ != null;
      }
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 3;</code>
       * @return The auth.
       */
      public smarthome.common.Common.Auth getAuth() {
        if (authBuilder_ == null) {
          return auth_ == null ? smarthome.common.Common.Auth.getDefaultInstance() : auth_;
        } else {
          return authBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 3;</code>
       */
      public Builder setAuth(smarthome.common.Common.Auth value) {
        if (authBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          auth_ = value;
          onChanged();
        } else {
          authBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 3;</code>
       */
      public Builder setAuth(
          smarthome.common.Common.Auth.Builder builderForValue) {
        if (authBuilder_ == null) {
          auth_ = builderForValue.build();
          onChanged();
        } else {
          authBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 3;</code>
       */
      public Builder mergeAuth(smarthome.common.Common.Auth value) {
        if (authBuilder_ == null) {
          if (auth_ != null) {
            auth_ =
              smarthome.common.Common.Auth.newBuilder(auth_).mergeFrom(value).buildPartial();
          } else {
            auth_ = value;
          }
          onChanged();
        } else {
          authBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 3;</code>
       */
      public Builder clearAuth() {
        if (authBuilder_ == null) {
          auth_ = null;
          onChanged();
        } else {
          auth_ = null;
          authBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 3;</code>
       */
      public smarthome.common.Common.Auth.Builder getAuthBuilder() {
        
        onChanged();
        return getAuthFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 3;</code>
       */
      public smarthome.common.Common.AuthOrBuilder getAuthOrBuilder() {
        if (authBuilder_ != null) {
          return authBuilder_.getMessageOrBuilder();
        } else {
          return auth_ == null ?
              smarthome.common.Common.Auth.getDefaultInstance() : auth_;
        }
      }
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Auth, smarthome.common.Common.Auth.Builder, smarthome.common.Common.AuthOrBuilder> 
          getAuthFieldBuilder() {
        if (authBuilder_ == null) {
          authBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              smarthome.common.Common.Auth, smarthome.common.Common.Auth.Builder, smarthome.common.Common.AuthOrBuilder>(
                  getAuth(),
                  getParentForChildren(),
                  isClean());
          auth_ = null;
        }
        return authBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:smarthome.lighting.ToggleRequest)
    }

    // @@protoc_insertion_point(class_scope:smarthome.lighting.ToggleRequest)
    private static final smarthome.lighting.Lighting.ToggleRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new smarthome.lighting.Lighting.ToggleRequest();
    }

    public static smarthome.lighting.Lighting.ToggleRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ToggleRequest>
        PARSER = new com.google.protobuf.AbstractParser<ToggleRequest>() {
      @java.lang.Override
      public ToggleRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ToggleRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ToggleRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ToggleRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public smarthome.lighting.Lighting.ToggleRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BrightnessRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:smarthome.lighting.BrightnessRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Target device to control
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return Whether the device field is set.
     */
    boolean hasDevice();
    /**
     * <pre>
     * Target device to control
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return The device.
     */
    smarthome.common.Common.Device getDevice();
    /**
     * <pre>
     * Target device to control
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     */
    smarthome.common.Common.DeviceOrBuilder getDeviceOrBuilder();

    /**
     * <pre>
     * Brightness level (0–100)
     * </pre>
     *
     * <code>int32 percent = 2;</code>
     * @return The percent.
     */
    int getPercent();

    /**
     * <pre>
     * Authentication details
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 3;</code>
     * @return Whether the auth field is set.
     */
    boolean hasAuth();
    /**
     * <pre>
     * Authentication details
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 3;</code>
     * @return The auth.
     */
    smarthome.common.Common.Auth getAuth();
    /**
     * <pre>
     * Authentication details
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 3;</code>
     */
    smarthome.common.Common.AuthOrBuilder getAuthOrBuilder();
  }
  /**
   * <pre>
   * Used to set the light brightness
   * </pre>
   *
   * Protobuf type {@code smarthome.lighting.BrightnessRequest}
   */
  public static final class BrightnessRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:smarthome.lighting.BrightnessRequest)
      BrightnessRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BrightnessRequest.newBuilder() to construct.
    private BrightnessRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BrightnessRequest() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new BrightnessRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private BrightnessRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              smarthome.common.Common.Device.Builder subBuilder = null;
              if (device_ != null) {
                subBuilder = device_.toBuilder();
              }
              device_ = input.readMessage(smarthome.common.Common.Device.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(device_);
                device_ = subBuilder.buildPartial();
              }

              break;
            }
            case 16: {

              percent_ = input.readInt32();
              break;
            }
            case 26: {
              smarthome.common.Common.Auth.Builder subBuilder = null;
              if (auth_ != null) {
                subBuilder = auth_.toBuilder();
              }
              auth_ = input.readMessage(smarthome.common.Common.Auth.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(auth_);
                auth_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return smarthome.lighting.Lighting.internal_static_smarthome_lighting_BrightnessRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return smarthome.lighting.Lighting.internal_static_smarthome_lighting_BrightnessRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              smarthome.lighting.Lighting.BrightnessRequest.class, smarthome.lighting.Lighting.BrightnessRequest.Builder.class);
    }

    public static final int DEVICE_FIELD_NUMBER = 1;
    private smarthome.common.Common.Device device_;
    /**
     * <pre>
     * Target device to control
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return Whether the device field is set.
     */
    @java.lang.Override
    public boolean hasDevice() {
      return device_ != null;
    }
    /**
     * <pre>
     * Target device to control
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return The device.
     */
    @java.lang.Override
    public smarthome.common.Common.Device getDevice() {
      return device_ == null ? smarthome.common.Common.Device.getDefaultInstance() : device_;
    }
    /**
     * <pre>
     * Target device to control
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     */
    @java.lang.Override
    public smarthome.common.Common.DeviceOrBuilder getDeviceOrBuilder() {
      return getDevice();
    }

    public static final int PERCENT_FIELD_NUMBER = 2;
    private int percent_;
    /**
     * <pre>
     * Brightness level (0–100)
     * </pre>
     *
     * <code>int32 percent = 2;</code>
     * @return The percent.
     */
    @java.lang.Override
    public int getPercent() {
      return percent_;
    }

    public static final int AUTH_FIELD_NUMBER = 3;
    private smarthome.common.Common.Auth auth_;
    /**
     * <pre>
     * Authentication details
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 3;</code>
     * @return Whether the auth field is set.
     */
    @java.lang.Override
    public boolean hasAuth() {
      return auth_ != null;
    }
    /**
     * <pre>
     * Authentication details
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 3;</code>
     * @return The auth.
     */
    @java.lang.Override
    public smarthome.common.Common.Auth getAuth() {
      return auth_ == null ? smarthome.common.Common.Auth.getDefaultInstance() : auth_;
    }
    /**
     * <pre>
     * Authentication details
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 3;</code>
     */
    @java.lang.Override
    public smarthome.common.Common.AuthOrBuilder getAuthOrBuilder() {
      return getAuth();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (device_ != null) {
        output.writeMessage(1, getDevice());
      }
      if (percent_ != 0) {
        output.writeInt32(2, percent_);
      }
      if (auth_ != null) {
        output.writeMessage(3, getAuth());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (device_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getDevice());
      }
      if (percent_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, percent_);
      }
      if (auth_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getAuth());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof smarthome.lighting.Lighting.BrightnessRequest)) {
        return super.equals(obj);
      }
      smarthome.lighting.Lighting.BrightnessRequest other = (smarthome.lighting.Lighting.BrightnessRequest) obj;

      if (hasDevice() != other.hasDevice()) return false;
      if (hasDevice()) {
        if (!getDevice()
            .equals(other.getDevice())) return false;
      }
      if (getPercent()
          != other.getPercent()) return false;
      if (hasAuth() != other.hasAuth()) return false;
      if (hasAuth()) {
        if (!getAuth()
            .equals(other.getAuth())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasDevice()) {
        hash = (37 * hash) + DEVICE_FIELD_NUMBER;
        hash = (53 * hash) + getDevice().hashCode();
      }
      hash = (37 * hash) + PERCENT_FIELD_NUMBER;
      hash = (53 * hash) + getPercent();
      if (hasAuth()) {
        hash = (37 * hash) + AUTH_FIELD_NUMBER;
        hash = (53 * hash) + getAuth().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static smarthome.lighting.Lighting.BrightnessRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.lighting.Lighting.BrightnessRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.lighting.Lighting.BrightnessRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.lighting.Lighting.BrightnessRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.lighting.Lighting.BrightnessRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.lighting.Lighting.BrightnessRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.lighting.Lighting.BrightnessRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smarthome.lighting.Lighting.BrightnessRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static smarthome.lighting.Lighting.BrightnessRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static smarthome.lighting.Lighting.BrightnessRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static smarthome.lighting.Lighting.BrightnessRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smarthome.lighting.Lighting.BrightnessRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(smarthome.lighting.Lighting.BrightnessRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Used to set the light brightness
     * </pre>
     *
     * Protobuf type {@code smarthome.lighting.BrightnessRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:smarthome.lighting.BrightnessRequest)
        smarthome.lighting.Lighting.BrightnessRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return smarthome.lighting.Lighting.internal_static_smarthome_lighting_BrightnessRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return smarthome.lighting.Lighting.internal_static_smarthome_lighting_BrightnessRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                smarthome.lighting.Lighting.BrightnessRequest.class, smarthome.lighting.Lighting.BrightnessRequest.Builder.class);
      }

      // Construct using smarthome.lighting.Lighting.BrightnessRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (deviceBuilder_ == null) {
          device_ = null;
        } else {
          device_ = null;
          deviceBuilder_ = null;
        }
        percent_ = 0;

        if (authBuilder_ == null) {
          auth_ = null;
        } else {
          auth_ = null;
          authBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return smarthome.lighting.Lighting.internal_static_smarthome_lighting_BrightnessRequest_descriptor;
      }

      @java.lang.Override
      public smarthome.lighting.Lighting.BrightnessRequest getDefaultInstanceForType() {
        return smarthome.lighting.Lighting.BrightnessRequest.getDefaultInstance();
      }

      @java.lang.Override
      public smarthome.lighting.Lighting.BrightnessRequest build() {
        smarthome.lighting.Lighting.BrightnessRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public smarthome.lighting.Lighting.BrightnessRequest buildPartial() {
        smarthome.lighting.Lighting.BrightnessRequest result = new smarthome.lighting.Lighting.BrightnessRequest(this);
        if (deviceBuilder_ == null) {
          result.device_ = device_;
        } else {
          result.device_ = deviceBuilder_.build();
        }
        result.percent_ = percent_;
        if (authBuilder_ == null) {
          result.auth_ = auth_;
        } else {
          result.auth_ = authBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof smarthome.lighting.Lighting.BrightnessRequest) {
          return mergeFrom((smarthome.lighting.Lighting.BrightnessRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(smarthome.lighting.Lighting.BrightnessRequest other) {
        if (other == smarthome.lighting.Lighting.BrightnessRequest.getDefaultInstance()) return this;
        if (other.hasDevice()) {
          mergeDevice(other.getDevice());
        }
        if (other.getPercent() != 0) {
          setPercent(other.getPercent());
        }
        if (other.hasAuth()) {
          mergeAuth(other.getAuth());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        smarthome.lighting.Lighting.BrightnessRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (smarthome.lighting.Lighting.BrightnessRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private smarthome.common.Common.Device device_;
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Device, smarthome.common.Common.Device.Builder, smarthome.common.Common.DeviceOrBuilder> deviceBuilder_;
      /**
       * <pre>
       * Target device to control
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       * @return Whether the device field is set.
       */
      public boolean hasDevice() {
        return deviceBuilder_ != null || device_ != null;
      }
      /**
       * <pre>
       * Target device to control
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       * @return The device.
       */
      public smarthome.common.Common.Device getDevice() {
        if (deviceBuilder_ == null) {
          return device_ == null ? smarthome.common.Common.Device.getDefaultInstance() : device_;
        } else {
          return deviceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Target device to control
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder setDevice(smarthome.common.Common.Device value) {
        if (deviceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          device_ = value;
          onChanged();
        } else {
          deviceBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Target device to control
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder setDevice(
          smarthome.common.Common.Device.Builder builderForValue) {
        if (deviceBuilder_ == null) {
          device_ = builderForValue.build();
          onChanged();
        } else {
          deviceBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Target device to control
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder mergeDevice(smarthome.common.Common.Device value) {
        if (deviceBuilder_ == null) {
          if (device_ != null) {
            device_ =
              smarthome.common.Common.Device.newBuilder(device_).mergeFrom(value).buildPartial();
          } else {
            device_ = value;
          }
          onChanged();
        } else {
          deviceBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Target device to control
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder clearDevice() {
        if (deviceBuilder_ == null) {
          device_ = null;
          onChanged();
        } else {
          device_ = null;
          deviceBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Target device to control
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public smarthome.common.Common.Device.Builder getDeviceBuilder() {
        
        onChanged();
        return getDeviceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Target device to control
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public smarthome.common.Common.DeviceOrBuilder getDeviceOrBuilder() {
        if (deviceBuilder_ != null) {
          return deviceBuilder_.getMessageOrBuilder();
        } else {
          return device_ == null ?
              smarthome.common.Common.Device.getDefaultInstance() : device_;
        }
      }
      /**
       * <pre>
       * Target device to control
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Device, smarthome.common.Common.Device.Builder, smarthome.common.Common.DeviceOrBuilder> 
          getDeviceFieldBuilder() {
        if (deviceBuilder_ == null) {
          deviceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              smarthome.common.Common.Device, smarthome.common.Common.Device.Builder, smarthome.common.Common.DeviceOrBuilder>(
                  getDevice(),
                  getParentForChildren(),
                  isClean());
          device_ = null;
        }
        return deviceBuilder_;
      }

      private int percent_ ;
      /**
       * <pre>
       * Brightness level (0–100)
       * </pre>
       *
       * <code>int32 percent = 2;</code>
       * @return The percent.
       */
      @java.lang.Override
      public int getPercent() {
        return percent_;
      }
      /**
       * <pre>
       * Brightness level (0–100)
       * </pre>
       *
       * <code>int32 percent = 2;</code>
       * @param value The percent to set.
       * @return This builder for chaining.
       */
      public Builder setPercent(int value) {
        
        percent_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Brightness level (0–100)
       * </pre>
       *
       * <code>int32 percent = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPercent() {
        
        percent_ = 0;
        onChanged();
        return this;
      }

      private smarthome.common.Common.Auth auth_;
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Auth, smarthome.common.Common.Auth.Builder, smarthome.common.Common.AuthOrBuilder> authBuilder_;
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 3;</code>
       * @return Whether the auth field is set.
       */
      public boolean hasAuth() {
        return authBuilder_ != null || auth_ != null;
      }
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 3;</code>
       * @return The auth.
       */
      public smarthome.common.Common.Auth getAuth() {
        if (authBuilder_ == null) {
          return auth_ == null ? smarthome.common.Common.Auth.getDefaultInstance() : auth_;
        } else {
          return authBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 3;</code>
       */
      public Builder setAuth(smarthome.common.Common.Auth value) {
        if (authBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          auth_ = value;
          onChanged();
        } else {
          authBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 3;</code>
       */
      public Builder setAuth(
          smarthome.common.Common.Auth.Builder builderForValue) {
        if (authBuilder_ == null) {
          auth_ = builderForValue.build();
          onChanged();
        } else {
          authBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 3;</code>
       */
      public Builder mergeAuth(smarthome.common.Common.Auth value) {
        if (authBuilder_ == null) {
          if (auth_ != null) {
            auth_ =
              smarthome.common.Common.Auth.newBuilder(auth_).mergeFrom(value).buildPartial();
          } else {
            auth_ = value;
          }
          onChanged();
        } else {
          authBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 3;</code>
       */
      public Builder clearAuth() {
        if (authBuilder_ == null) {
          auth_ = null;
          onChanged();
        } else {
          auth_ = null;
          authBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 3;</code>
       */
      public smarthome.common.Common.Auth.Builder getAuthBuilder() {
        
        onChanged();
        return getAuthFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 3;</code>
       */
      public smarthome.common.Common.AuthOrBuilder getAuthOrBuilder() {
        if (authBuilder_ != null) {
          return authBuilder_.getMessageOrBuilder();
        } else {
          return auth_ == null ?
              smarthome.common.Common.Auth.getDefaultInstance() : auth_;
        }
      }
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Auth, smarthome.common.Common.Auth.Builder, smarthome.common.Common.AuthOrBuilder> 
          getAuthFieldBuilder() {
        if (authBuilder_ == null) {
          authBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              smarthome.common.Common.Auth, smarthome.common.Common.Auth.Builder, smarthome.common.Common.AuthOrBuilder>(
                  getAuth(),
                  getParentForChildren(),
                  isClean());
          auth_ = null;
        }
        return authBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:smarthome.lighting.BrightnessRequest)
    }

    // @@protoc_insertion_point(class_scope:smarthome.lighting.BrightnessRequest)
    private static final smarthome.lighting.Lighting.BrightnessRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new smarthome.lighting.Lighting.BrightnessRequest();
    }

    public static smarthome.lighting.Lighting.BrightnessRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BrightnessRequest>
        PARSER = new com.google.protobuf.AbstractParser<BrightnessRequest>() {
      @java.lang.Override
      public BrightnessRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BrightnessRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<BrightnessRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BrightnessRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public smarthome.lighting.Lighting.BrightnessRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LightStreamRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:smarthome.lighting.LightStreamRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Device to monitor
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return Whether the device field is set.
     */
    boolean hasDevice();
    /**
     * <pre>
     * Device to monitor
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return The device.
     */
    smarthome.common.Common.Device getDevice();
    /**
     * <pre>
     * Device to monitor
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     */
    smarthome.common.Common.DeviceOrBuilder getDeviceOrBuilder();

    /**
     * <pre>
     * Authentication details
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     * @return Whether the auth field is set.
     */
    boolean hasAuth();
    /**
     * <pre>
     * Authentication details
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     * @return The auth.
     */
    smarthome.common.Common.Auth getAuth();
    /**
     * <pre>
     * Authentication details
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     */
    smarthome.common.Common.AuthOrBuilder getAuthOrBuilder();

    /**
     * <pre>
     * Frequency of updates (e.g., every 5 seconds)
     * </pre>
     *
     * <code>int32 update_interval_seconds = 3;</code>
     * @return The updateIntervalSeconds.
     */
    int getUpdateIntervalSeconds();
  }
  /**
   * <pre>
   * Sent by the client to request regular light status updates
   * </pre>
   *
   * Protobuf type {@code smarthome.lighting.LightStreamRequest}
   */
  public static final class LightStreamRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:smarthome.lighting.LightStreamRequest)
      LightStreamRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LightStreamRequest.newBuilder() to construct.
    private LightStreamRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LightStreamRequest() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new LightStreamRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private LightStreamRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              smarthome.common.Common.Device.Builder subBuilder = null;
              if (device_ != null) {
                subBuilder = device_.toBuilder();
              }
              device_ = input.readMessage(smarthome.common.Common.Device.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(device_);
                device_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              smarthome.common.Common.Auth.Builder subBuilder = null;
              if (auth_ != null) {
                subBuilder = auth_.toBuilder();
              }
              auth_ = input.readMessage(smarthome.common.Common.Auth.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(auth_);
                auth_ = subBuilder.buildPartial();
              }

              break;
            }
            case 24: {

              updateIntervalSeconds_ = input.readInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return smarthome.lighting.Lighting.internal_static_smarthome_lighting_LightStreamRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return smarthome.lighting.Lighting.internal_static_smarthome_lighting_LightStreamRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              smarthome.lighting.Lighting.LightStreamRequest.class, smarthome.lighting.Lighting.LightStreamRequest.Builder.class);
    }

    public static final int DEVICE_FIELD_NUMBER = 1;
    private smarthome.common.Common.Device device_;
    /**
     * <pre>
     * Device to monitor
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return Whether the device field is set.
     */
    @java.lang.Override
    public boolean hasDevice() {
      return device_ != null;
    }
    /**
     * <pre>
     * Device to monitor
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return The device.
     */
    @java.lang.Override
    public smarthome.common.Common.Device getDevice() {
      return device_ == null ? smarthome.common.Common.Device.getDefaultInstance() : device_;
    }
    /**
     * <pre>
     * Device to monitor
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     */
    @java.lang.Override
    public smarthome.common.Common.DeviceOrBuilder getDeviceOrBuilder() {
      return getDevice();
    }

    public static final int AUTH_FIELD_NUMBER = 2;
    private smarthome.common.Common.Auth auth_;
    /**
     * <pre>
     * Authentication details
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     * @return Whether the auth field is set.
     */
    @java.lang.Override
    public boolean hasAuth() {
      return auth_ != null;
    }
    /**
     * <pre>
     * Authentication details
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     * @return The auth.
     */
    @java.lang.Override
    public smarthome.common.Common.Auth getAuth() {
      return auth_ == null ? smarthome.common.Common.Auth.getDefaultInstance() : auth_;
    }
    /**
     * <pre>
     * Authentication details
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     */
    @java.lang.Override
    public smarthome.common.Common.AuthOrBuilder getAuthOrBuilder() {
      return getAuth();
    }

    public static final int UPDATE_INTERVAL_SECONDS_FIELD_NUMBER = 3;
    private int updateIntervalSeconds_;
    /**
     * <pre>
     * Frequency of updates (e.g., every 5 seconds)
     * </pre>
     *
     * <code>int32 update_interval_seconds = 3;</code>
     * @return The updateIntervalSeconds.
     */
    @java.lang.Override
    public int getUpdateIntervalSeconds() {
      return updateIntervalSeconds_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (device_ != null) {
        output.writeMessage(1, getDevice());
      }
      if (auth_ != null) {
        output.writeMessage(2, getAuth());
      }
      if (updateIntervalSeconds_ != 0) {
        output.writeInt32(3, updateIntervalSeconds_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (device_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getDevice());
      }
      if (auth_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getAuth());
      }
      if (updateIntervalSeconds_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, updateIntervalSeconds_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof smarthome.lighting.Lighting.LightStreamRequest)) {
        return super.equals(obj);
      }
      smarthome.lighting.Lighting.LightStreamRequest other = (smarthome.lighting.Lighting.LightStreamRequest) obj;

      if (hasDevice() != other.hasDevice()) return false;
      if (hasDevice()) {
        if (!getDevice()
            .equals(other.getDevice())) return false;
      }
      if (hasAuth() != other.hasAuth()) return false;
      if (hasAuth()) {
        if (!getAuth()
            .equals(other.getAuth())) return false;
      }
      if (getUpdateIntervalSeconds()
          != other.getUpdateIntervalSeconds()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasDevice()) {
        hash = (37 * hash) + DEVICE_FIELD_NUMBER;
        hash = (53 * hash) + getDevice().hashCode();
      }
      if (hasAuth()) {
        hash = (37 * hash) + AUTH_FIELD_NUMBER;
        hash = (53 * hash) + getAuth().hashCode();
      }
      hash = (37 * hash) + UPDATE_INTERVAL_SECONDS_FIELD_NUMBER;
      hash = (53 * hash) + getUpdateIntervalSeconds();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static smarthome.lighting.Lighting.LightStreamRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.lighting.Lighting.LightStreamRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.lighting.Lighting.LightStreamRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.lighting.Lighting.LightStreamRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.lighting.Lighting.LightStreamRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.lighting.Lighting.LightStreamRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.lighting.Lighting.LightStreamRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smarthome.lighting.Lighting.LightStreamRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static smarthome.lighting.Lighting.LightStreamRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static smarthome.lighting.Lighting.LightStreamRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static smarthome.lighting.Lighting.LightStreamRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smarthome.lighting.Lighting.LightStreamRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(smarthome.lighting.Lighting.LightStreamRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Sent by the client to request regular light status updates
     * </pre>
     *
     * Protobuf type {@code smarthome.lighting.LightStreamRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:smarthome.lighting.LightStreamRequest)
        smarthome.lighting.Lighting.LightStreamRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return smarthome.lighting.Lighting.internal_static_smarthome_lighting_LightStreamRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return smarthome.lighting.Lighting.internal_static_smarthome_lighting_LightStreamRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                smarthome.lighting.Lighting.LightStreamRequest.class, smarthome.lighting.Lighting.LightStreamRequest.Builder.class);
      }

      // Construct using smarthome.lighting.Lighting.LightStreamRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (deviceBuilder_ == null) {
          device_ = null;
        } else {
          device_ = null;
          deviceBuilder_ = null;
        }
        if (authBuilder_ == null) {
          auth_ = null;
        } else {
          auth_ = null;
          authBuilder_ = null;
        }
        updateIntervalSeconds_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return smarthome.lighting.Lighting.internal_static_smarthome_lighting_LightStreamRequest_descriptor;
      }

      @java.lang.Override
      public smarthome.lighting.Lighting.LightStreamRequest getDefaultInstanceForType() {
        return smarthome.lighting.Lighting.LightStreamRequest.getDefaultInstance();
      }

      @java.lang.Override
      public smarthome.lighting.Lighting.LightStreamRequest build() {
        smarthome.lighting.Lighting.LightStreamRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public smarthome.lighting.Lighting.LightStreamRequest buildPartial() {
        smarthome.lighting.Lighting.LightStreamRequest result = new smarthome.lighting.Lighting.LightStreamRequest(this);
        if (deviceBuilder_ == null) {
          result.device_ = device_;
        } else {
          result.device_ = deviceBuilder_.build();
        }
        if (authBuilder_ == null) {
          result.auth_ = auth_;
        } else {
          result.auth_ = authBuilder_.build();
        }
        result.updateIntervalSeconds_ = updateIntervalSeconds_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof smarthome.lighting.Lighting.LightStreamRequest) {
          return mergeFrom((smarthome.lighting.Lighting.LightStreamRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(smarthome.lighting.Lighting.LightStreamRequest other) {
        if (other == smarthome.lighting.Lighting.LightStreamRequest.getDefaultInstance()) return this;
        if (other.hasDevice()) {
          mergeDevice(other.getDevice());
        }
        if (other.hasAuth()) {
          mergeAuth(other.getAuth());
        }
        if (other.getUpdateIntervalSeconds() != 0) {
          setUpdateIntervalSeconds(other.getUpdateIntervalSeconds());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        smarthome.lighting.Lighting.LightStreamRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (smarthome.lighting.Lighting.LightStreamRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private smarthome.common.Common.Device device_;
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Device, smarthome.common.Common.Device.Builder, smarthome.common.Common.DeviceOrBuilder> deviceBuilder_;
      /**
       * <pre>
       * Device to monitor
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       * @return Whether the device field is set.
       */
      public boolean hasDevice() {
        return deviceBuilder_ != null || device_ != null;
      }
      /**
       * <pre>
       * Device to monitor
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       * @return The device.
       */
      public smarthome.common.Common.Device getDevice() {
        if (deviceBuilder_ == null) {
          return device_ == null ? smarthome.common.Common.Device.getDefaultInstance() : device_;
        } else {
          return deviceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Device to monitor
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder setDevice(smarthome.common.Common.Device value) {
        if (deviceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          device_ = value;
          onChanged();
        } else {
          deviceBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Device to monitor
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder setDevice(
          smarthome.common.Common.Device.Builder builderForValue) {
        if (deviceBuilder_ == null) {
          device_ = builderForValue.build();
          onChanged();
        } else {
          deviceBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Device to monitor
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder mergeDevice(smarthome.common.Common.Device value) {
        if (deviceBuilder_ == null) {
          if (device_ != null) {
            device_ =
              smarthome.common.Common.Device.newBuilder(device_).mergeFrom(value).buildPartial();
          } else {
            device_ = value;
          }
          onChanged();
        } else {
          deviceBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Device to monitor
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder clearDevice() {
        if (deviceBuilder_ == null) {
          device_ = null;
          onChanged();
        } else {
          device_ = null;
          deviceBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Device to monitor
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public smarthome.common.Common.Device.Builder getDeviceBuilder() {
        
        onChanged();
        return getDeviceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Device to monitor
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public smarthome.common.Common.DeviceOrBuilder getDeviceOrBuilder() {
        if (deviceBuilder_ != null) {
          return deviceBuilder_.getMessageOrBuilder();
        } else {
          return device_ == null ?
              smarthome.common.Common.Device.getDefaultInstance() : device_;
        }
      }
      /**
       * <pre>
       * Device to monitor
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Device, smarthome.common.Common.Device.Builder, smarthome.common.Common.DeviceOrBuilder> 
          getDeviceFieldBuilder() {
        if (deviceBuilder_ == null) {
          deviceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              smarthome.common.Common.Device, smarthome.common.Common.Device.Builder, smarthome.common.Common.DeviceOrBuilder>(
                  getDevice(),
                  getParentForChildren(),
                  isClean());
          device_ = null;
        }
        return deviceBuilder_;
      }

      private smarthome.common.Common.Auth auth_;
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Auth, smarthome.common.Common.Auth.Builder, smarthome.common.Common.AuthOrBuilder> authBuilder_;
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       * @return Whether the auth field is set.
       */
      public boolean hasAuth() {
        return authBuilder_ != null || auth_ != null;
      }
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       * @return The auth.
       */
      public smarthome.common.Common.Auth getAuth() {
        if (authBuilder_ == null) {
          return auth_ == null ? smarthome.common.Common.Auth.getDefaultInstance() : auth_;
        } else {
          return authBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public Builder setAuth(smarthome.common.Common.Auth value) {
        if (authBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          auth_ = value;
          onChanged();
        } else {
          authBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public Builder setAuth(
          smarthome.common.Common.Auth.Builder builderForValue) {
        if (authBuilder_ == null) {
          auth_ = builderForValue.build();
          onChanged();
        } else {
          authBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public Builder mergeAuth(smarthome.common.Common.Auth value) {
        if (authBuilder_ == null) {
          if (auth_ != null) {
            auth_ =
              smarthome.common.Common.Auth.newBuilder(auth_).mergeFrom(value).buildPartial();
          } else {
            auth_ = value;
          }
          onChanged();
        } else {
          authBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public Builder clearAuth() {
        if (authBuilder_ == null) {
          auth_ = null;
          onChanged();
        } else {
          auth_ = null;
          authBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public smarthome.common.Common.Auth.Builder getAuthBuilder() {
        
        onChanged();
        return getAuthFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public smarthome.common.Common.AuthOrBuilder getAuthOrBuilder() {
        if (authBuilder_ != null) {
          return authBuilder_.getMessageOrBuilder();
        } else {
          return auth_ == null ?
              smarthome.common.Common.Auth.getDefaultInstance() : auth_;
        }
      }
      /**
       * <pre>
       * Authentication details
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Auth, smarthome.common.Common.Auth.Builder, smarthome.common.Common.AuthOrBuilder> 
          getAuthFieldBuilder() {
        if (authBuilder_ == null) {
          authBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              smarthome.common.Common.Auth, smarthome.common.Common.Auth.Builder, smarthome.common.Common.AuthOrBuilder>(
                  getAuth(),
                  getParentForChildren(),
                  isClean());
          auth_ = null;
        }
        return authBuilder_;
      }

      private int updateIntervalSeconds_ ;
      /**
       * <pre>
       * Frequency of updates (e.g., every 5 seconds)
       * </pre>
       *
       * <code>int32 update_interval_seconds = 3;</code>
       * @return The updateIntervalSeconds.
       */
      @java.lang.Override
      public int getUpdateIntervalSeconds() {
        return updateIntervalSeconds_;
      }
      /**
       * <pre>
       * Frequency of updates (e.g., every 5 seconds)
       * </pre>
       *
       * <code>int32 update_interval_seconds = 3;</code>
       * @param value The updateIntervalSeconds to set.
       * @return This builder for chaining.
       */
      public Builder setUpdateIntervalSeconds(int value) {
        
        updateIntervalSeconds_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Frequency of updates (e.g., every 5 seconds)
       * </pre>
       *
       * <code>int32 update_interval_seconds = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearUpdateIntervalSeconds() {
        
        updateIntervalSeconds_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:smarthome.lighting.LightStreamRequest)
    }

    // @@protoc_insertion_point(class_scope:smarthome.lighting.LightStreamRequest)
    private static final smarthome.lighting.Lighting.LightStreamRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new smarthome.lighting.Lighting.LightStreamRequest();
    }

    public static smarthome.lighting.Lighting.LightStreamRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LightStreamRequest>
        PARSER = new com.google.protobuf.AbstractParser<LightStreamRequest>() {
      @java.lang.Override
      public LightStreamRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LightStreamRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<LightStreamRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LightStreamRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public smarthome.lighting.Lighting.LightStreamRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LightStatusOrBuilder extends
      // @@protoc_insertion_point(interface_extends:smarthome.lighting.LightStatus)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * True if light is ON
     * </pre>
     *
     * <code>bool is_on = 1;</code>
     * @return The isOn.
     */
    boolean getIsOn();

    /**
     * <pre>
     * Current brightness level (0–100)
     * </pre>
     *
     * <code>int32 brightness = 2;</code>
     * @return The brightness.
     */
    int getBrightness();

    /**
     * <pre>
     * Time of the status report (Unix epoch millis)
     * </pre>
     *
     * <code>int64 timestamp = 3;</code>
     * @return The timestamp.
     */
    long getTimestamp();
  }
  /**
   * <pre>
   * Sent by the server to indicate the current light state
   * </pre>
   *
   * Protobuf type {@code smarthome.lighting.LightStatus}
   */
  public static final class LightStatus extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:smarthome.lighting.LightStatus)
      LightStatusOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LightStatus.newBuilder() to construct.
    private LightStatus(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LightStatus() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new LightStatus();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private LightStatus(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              isOn_ = input.readBool();
              break;
            }
            case 16: {

              brightness_ = input.readInt32();
              break;
            }
            case 24: {

              timestamp_ = input.readInt64();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return smarthome.lighting.Lighting.internal_static_smarthome_lighting_LightStatus_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return smarthome.lighting.Lighting.internal_static_smarthome_lighting_LightStatus_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              smarthome.lighting.Lighting.LightStatus.class, smarthome.lighting.Lighting.LightStatus.Builder.class);
    }

    public static final int IS_ON_FIELD_NUMBER = 1;
    private boolean isOn_;
    /**
     * <pre>
     * True if light is ON
     * </pre>
     *
     * <code>bool is_on = 1;</code>
     * @return The isOn.
     */
    @java.lang.Override
    public boolean getIsOn() {
      return isOn_;
    }

    public static final int BRIGHTNESS_FIELD_NUMBER = 2;
    private int brightness_;
    /**
     * <pre>
     * Current brightness level (0–100)
     * </pre>
     *
     * <code>int32 brightness = 2;</code>
     * @return The brightness.
     */
    @java.lang.Override
    public int getBrightness() {
      return brightness_;
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 3;
    private long timestamp_;
    /**
     * <pre>
     * Time of the status report (Unix epoch millis)
     * </pre>
     *
     * <code>int64 timestamp = 3;</code>
     * @return The timestamp.
     */
    @java.lang.Override
    public long getTimestamp() {
      return timestamp_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (isOn_ != false) {
        output.writeBool(1, isOn_);
      }
      if (brightness_ != 0) {
        output.writeInt32(2, brightness_);
      }
      if (timestamp_ != 0L) {
        output.writeInt64(3, timestamp_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (isOn_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, isOn_);
      }
      if (brightness_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, brightness_);
      }
      if (timestamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, timestamp_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof smarthome.lighting.Lighting.LightStatus)) {
        return super.equals(obj);
      }
      smarthome.lighting.Lighting.LightStatus other = (smarthome.lighting.Lighting.LightStatus) obj;

      if (getIsOn()
          != other.getIsOn()) return false;
      if (getBrightness()
          != other.getBrightness()) return false;
      if (getTimestamp()
          != other.getTimestamp()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + IS_ON_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsOn());
      hash = (37 * hash) + BRIGHTNESS_FIELD_NUMBER;
      hash = (53 * hash) + getBrightness();
      hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimestamp());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static smarthome.lighting.Lighting.LightStatus parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.lighting.Lighting.LightStatus parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.lighting.Lighting.LightStatus parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.lighting.Lighting.LightStatus parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.lighting.Lighting.LightStatus parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.lighting.Lighting.LightStatus parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.lighting.Lighting.LightStatus parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smarthome.lighting.Lighting.LightStatus parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static smarthome.lighting.Lighting.LightStatus parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static smarthome.lighting.Lighting.LightStatus parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static smarthome.lighting.Lighting.LightStatus parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smarthome.lighting.Lighting.LightStatus parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(smarthome.lighting.Lighting.LightStatus prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Sent by the server to indicate the current light state
     * </pre>
     *
     * Protobuf type {@code smarthome.lighting.LightStatus}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:smarthome.lighting.LightStatus)
        smarthome.lighting.Lighting.LightStatusOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return smarthome.lighting.Lighting.internal_static_smarthome_lighting_LightStatus_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return smarthome.lighting.Lighting.internal_static_smarthome_lighting_LightStatus_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                smarthome.lighting.Lighting.LightStatus.class, smarthome.lighting.Lighting.LightStatus.Builder.class);
      }

      // Construct using smarthome.lighting.Lighting.LightStatus.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        isOn_ = false;

        brightness_ = 0;

        timestamp_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return smarthome.lighting.Lighting.internal_static_smarthome_lighting_LightStatus_descriptor;
      }

      @java.lang.Override
      public smarthome.lighting.Lighting.LightStatus getDefaultInstanceForType() {
        return smarthome.lighting.Lighting.LightStatus.getDefaultInstance();
      }

      @java.lang.Override
      public smarthome.lighting.Lighting.LightStatus build() {
        smarthome.lighting.Lighting.LightStatus result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public smarthome.lighting.Lighting.LightStatus buildPartial() {
        smarthome.lighting.Lighting.LightStatus result = new smarthome.lighting.Lighting.LightStatus(this);
        result.isOn_ = isOn_;
        result.brightness_ = brightness_;
        result.timestamp_ = timestamp_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof smarthome.lighting.Lighting.LightStatus) {
          return mergeFrom((smarthome.lighting.Lighting.LightStatus)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(smarthome.lighting.Lighting.LightStatus other) {
        if (other == smarthome.lighting.Lighting.LightStatus.getDefaultInstance()) return this;
        if (other.getIsOn() != false) {
          setIsOn(other.getIsOn());
        }
        if (other.getBrightness() != 0) {
          setBrightness(other.getBrightness());
        }
        if (other.getTimestamp() != 0L) {
          setTimestamp(other.getTimestamp());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        smarthome.lighting.Lighting.LightStatus parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (smarthome.lighting.Lighting.LightStatus) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private boolean isOn_ ;
      /**
       * <pre>
       * True if light is ON
       * </pre>
       *
       * <code>bool is_on = 1;</code>
       * @return The isOn.
       */
      @java.lang.Override
      public boolean getIsOn() {
        return isOn_;
      }
      /**
       * <pre>
       * True if light is ON
       * </pre>
       *
       * <code>bool is_on = 1;</code>
       * @param value The isOn to set.
       * @return This builder for chaining.
       */
      public Builder setIsOn(boolean value) {
        
        isOn_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * True if light is ON
       * </pre>
       *
       * <code>bool is_on = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsOn() {
        
        isOn_ = false;
        onChanged();
        return this;
      }

      private int brightness_ ;
      /**
       * <pre>
       * Current brightness level (0–100)
       * </pre>
       *
       * <code>int32 brightness = 2;</code>
       * @return The brightness.
       */
      @java.lang.Override
      public int getBrightness() {
        return brightness_;
      }
      /**
       * <pre>
       * Current brightness level (0–100)
       * </pre>
       *
       * <code>int32 brightness = 2;</code>
       * @param value The brightness to set.
       * @return This builder for chaining.
       */
      public Builder setBrightness(int value) {
        
        brightness_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Current brightness level (0–100)
       * </pre>
       *
       * <code>int32 brightness = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearBrightness() {
        
        brightness_ = 0;
        onChanged();
        return this;
      }

      private long timestamp_ ;
      /**
       * <pre>
       * Time of the status report (Unix epoch millis)
       * </pre>
       *
       * <code>int64 timestamp = 3;</code>
       * @return The timestamp.
       */
      @java.lang.Override
      public long getTimestamp() {
        return timestamp_;
      }
      /**
       * <pre>
       * Time of the status report (Unix epoch millis)
       * </pre>
       *
       * <code>int64 timestamp = 3;</code>
       * @param value The timestamp to set.
       * @return This builder for chaining.
       */
      public Builder setTimestamp(long value) {
        
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Time of the status report (Unix epoch millis)
       * </pre>
       *
       * <code>int64 timestamp = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimestamp() {
        
        timestamp_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:smarthome.lighting.LightStatus)
    }

    // @@protoc_insertion_point(class_scope:smarthome.lighting.LightStatus)
    private static final smarthome.lighting.Lighting.LightStatus DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new smarthome.lighting.Lighting.LightStatus();
    }

    public static smarthome.lighting.Lighting.LightStatus getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LightStatus>
        PARSER = new com.google.protobuf.AbstractParser<LightStatus>() {
      @java.lang.Override
      public LightStatus parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LightStatus(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<LightStatus> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LightStatus> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public smarthome.lighting.Lighting.LightStatus getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LightControlCommandOrBuilder extends
      // @@protoc_insertion_point(interface_extends:smarthome.lighting.LightControlCommand)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Target device
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return Whether the device field is set.
     */
    boolean hasDevice();
    /**
     * <pre>
     * Target device
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return The device.
     */
    smarthome.common.Common.Device getDevice();
    /**
     * <pre>
     * Target device
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     */
    smarthome.common.Common.DeviceOrBuilder getDeviceOrBuilder();

    /**
     * <pre>
     * Authentication credentials
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     * @return Whether the auth field is set.
     */
    boolean hasAuth();
    /**
     * <pre>
     * Authentication credentials
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     * @return The auth.
     */
    smarthome.common.Common.Auth getAuth();
    /**
     * <pre>
     * Authentication credentials
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     */
    smarthome.common.Common.AuthOrBuilder getAuthOrBuilder();

    /**
     * <pre>
     * ON/OFF command
     * </pre>
     *
     * <code>bool toggle = 3;</code>
     * @return Whether the toggle field is set.
     */
    boolean hasToggle();
    /**
     * <pre>
     * ON/OFF command
     * </pre>
     *
     * <code>bool toggle = 3;</code>
     * @return The toggle.
     */
    boolean getToggle();

    /**
     * <pre>
     * Brightness level command
     * </pre>
     *
     * <code>int32 set_brightness = 4;</code>
     * @return Whether the setBrightness field is set.
     */
    boolean hasSetBrightness();
    /**
     * <pre>
     * Brightness level command
     * </pre>
     *
     * <code>int32 set_brightness = 4;</code>
     * @return The setBrightness.
     */
    int getSetBrightness();

    public smarthome.lighting.Lighting.LightControlCommand.CommandCase getCommandCase();
  }
  /**
   * <pre>
   * Used in client-streaming to queue multiple commands for a light
   * </pre>
   *
   * Protobuf type {@code smarthome.lighting.LightControlCommand}
   */
  public static final class LightControlCommand extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:smarthome.lighting.LightControlCommand)
      LightControlCommandOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LightControlCommand.newBuilder() to construct.
    private LightControlCommand(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LightControlCommand() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new LightControlCommand();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private LightControlCommand(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              smarthome.common.Common.Device.Builder subBuilder = null;
              if (device_ != null) {
                subBuilder = device_.toBuilder();
              }
              device_ = input.readMessage(smarthome.common.Common.Device.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(device_);
                device_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              smarthome.common.Common.Auth.Builder subBuilder = null;
              if (auth_ != null) {
                subBuilder = auth_.toBuilder();
              }
              auth_ = input.readMessage(smarthome.common.Common.Auth.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(auth_);
                auth_ = subBuilder.buildPartial();
              }

              break;
            }
            case 24: {
              command_ = input.readBool();
              commandCase_ = 3;
              break;
            }
            case 32: {
              command_ = input.readInt32();
              commandCase_ = 4;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return smarthome.lighting.Lighting.internal_static_smarthome_lighting_LightControlCommand_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return smarthome.lighting.Lighting.internal_static_smarthome_lighting_LightControlCommand_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              smarthome.lighting.Lighting.LightControlCommand.class, smarthome.lighting.Lighting.LightControlCommand.Builder.class);
    }

    private int commandCase_ = 0;
    private java.lang.Object command_;
    public enum CommandCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      TOGGLE(3),
      SET_BRIGHTNESS(4),
      COMMAND_NOT_SET(0);
      private final int value;
      private CommandCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static CommandCase valueOf(int value) {
        return forNumber(value);
      }

      public static CommandCase forNumber(int value) {
        switch (value) {
          case 3: return TOGGLE;
          case 4: return SET_BRIGHTNESS;
          case 0: return COMMAND_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public CommandCase
    getCommandCase() {
      return CommandCase.forNumber(
          commandCase_);
    }

    public static final int DEVICE_FIELD_NUMBER = 1;
    private smarthome.common.Common.Device device_;
    /**
     * <pre>
     * Target device
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return Whether the device field is set.
     */
    @java.lang.Override
    public boolean hasDevice() {
      return device_ != null;
    }
    /**
     * <pre>
     * Target device
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     * @return The device.
     */
    @java.lang.Override
    public smarthome.common.Common.Device getDevice() {
      return device_ == null ? smarthome.common.Common.Device.getDefaultInstance() : device_;
    }
    /**
     * <pre>
     * Target device
     * </pre>
     *
     * <code>.smarthome.common.Device device = 1;</code>
     */
    @java.lang.Override
    public smarthome.common.Common.DeviceOrBuilder getDeviceOrBuilder() {
      return getDevice();
    }

    public static final int AUTH_FIELD_NUMBER = 2;
    private smarthome.common.Common.Auth auth_;
    /**
     * <pre>
     * Authentication credentials
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     * @return Whether the auth field is set.
     */
    @java.lang.Override
    public boolean hasAuth() {
      return auth_ != null;
    }
    /**
     * <pre>
     * Authentication credentials
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     * @return The auth.
     */
    @java.lang.Override
    public smarthome.common.Common.Auth getAuth() {
      return auth_ == null ? smarthome.common.Common.Auth.getDefaultInstance() : auth_;
    }
    /**
     * <pre>
     * Authentication credentials
     * </pre>
     *
     * <code>.smarthome.common.Auth auth = 2;</code>
     */
    @java.lang.Override
    public smarthome.common.Common.AuthOrBuilder getAuthOrBuilder() {
      return getAuth();
    }

    public static final int TOGGLE_FIELD_NUMBER = 3;
    /**
     * <pre>
     * ON/OFF command
     * </pre>
     *
     * <code>bool toggle = 3;</code>
     * @return Whether the toggle field is set.
     */
    @java.lang.Override
    public boolean hasToggle() {
      return commandCase_ == 3;
    }
    /**
     * <pre>
     * ON/OFF command
     * </pre>
     *
     * <code>bool toggle = 3;</code>
     * @return The toggle.
     */
    @java.lang.Override
    public boolean getToggle() {
      if (commandCase_ == 3) {
        return (java.lang.Boolean) command_;
      }
      return false;
    }

    public static final int SET_BRIGHTNESS_FIELD_NUMBER = 4;
    /**
     * <pre>
     * Brightness level command
     * </pre>
     *
     * <code>int32 set_brightness = 4;</code>
     * @return Whether the setBrightness field is set.
     */
    @java.lang.Override
    public boolean hasSetBrightness() {
      return commandCase_ == 4;
    }
    /**
     * <pre>
     * Brightness level command
     * </pre>
     *
     * <code>int32 set_brightness = 4;</code>
     * @return The setBrightness.
     */
    @java.lang.Override
    public int getSetBrightness() {
      if (commandCase_ == 4) {
        return (java.lang.Integer) command_;
      }
      return 0;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (device_ != null) {
        output.writeMessage(1, getDevice());
      }
      if (auth_ != null) {
        output.writeMessage(2, getAuth());
      }
      if (commandCase_ == 3) {
        output.writeBool(
            3, (boolean)((java.lang.Boolean) command_));
      }
      if (commandCase_ == 4) {
        output.writeInt32(
            4, (int)((java.lang.Integer) command_));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (device_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getDevice());
      }
      if (auth_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getAuth());
      }
      if (commandCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              3, (boolean)((java.lang.Boolean) command_));
      }
      if (commandCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(
              4, (int)((java.lang.Integer) command_));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof smarthome.lighting.Lighting.LightControlCommand)) {
        return super.equals(obj);
      }
      smarthome.lighting.Lighting.LightControlCommand other = (smarthome.lighting.Lighting.LightControlCommand) obj;

      if (hasDevice() != other.hasDevice()) return false;
      if (hasDevice()) {
        if (!getDevice()
            .equals(other.getDevice())) return false;
      }
      if (hasAuth() != other.hasAuth()) return false;
      if (hasAuth()) {
        if (!getAuth()
            .equals(other.getAuth())) return false;
      }
      if (!getCommandCase().equals(other.getCommandCase())) return false;
      switch (commandCase_) {
        case 3:
          if (getToggle()
              != other.getToggle()) return false;
          break;
        case 4:
          if (getSetBrightness()
              != other.getSetBrightness()) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasDevice()) {
        hash = (37 * hash) + DEVICE_FIELD_NUMBER;
        hash = (53 * hash) + getDevice().hashCode();
      }
      if (hasAuth()) {
        hash = (37 * hash) + AUTH_FIELD_NUMBER;
        hash = (53 * hash) + getAuth().hashCode();
      }
      switch (commandCase_) {
        case 3:
          hash = (37 * hash) + TOGGLE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getToggle());
          break;
        case 4:
          hash = (37 * hash) + SET_BRIGHTNESS_FIELD_NUMBER;
          hash = (53 * hash) + getSetBrightness();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static smarthome.lighting.Lighting.LightControlCommand parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.lighting.Lighting.LightControlCommand parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.lighting.Lighting.LightControlCommand parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.lighting.Lighting.LightControlCommand parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.lighting.Lighting.LightControlCommand parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smarthome.lighting.Lighting.LightControlCommand parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smarthome.lighting.Lighting.LightControlCommand parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smarthome.lighting.Lighting.LightControlCommand parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static smarthome.lighting.Lighting.LightControlCommand parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static smarthome.lighting.Lighting.LightControlCommand parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static smarthome.lighting.Lighting.LightControlCommand parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smarthome.lighting.Lighting.LightControlCommand parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(smarthome.lighting.Lighting.LightControlCommand prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Used in client-streaming to queue multiple commands for a light
     * </pre>
     *
     * Protobuf type {@code smarthome.lighting.LightControlCommand}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:smarthome.lighting.LightControlCommand)
        smarthome.lighting.Lighting.LightControlCommandOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return smarthome.lighting.Lighting.internal_static_smarthome_lighting_LightControlCommand_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return smarthome.lighting.Lighting.internal_static_smarthome_lighting_LightControlCommand_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                smarthome.lighting.Lighting.LightControlCommand.class, smarthome.lighting.Lighting.LightControlCommand.Builder.class);
      }

      // Construct using smarthome.lighting.Lighting.LightControlCommand.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (deviceBuilder_ == null) {
          device_ = null;
        } else {
          device_ = null;
          deviceBuilder_ = null;
        }
        if (authBuilder_ == null) {
          auth_ = null;
        } else {
          auth_ = null;
          authBuilder_ = null;
        }
        commandCase_ = 0;
        command_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return smarthome.lighting.Lighting.internal_static_smarthome_lighting_LightControlCommand_descriptor;
      }

      @java.lang.Override
      public smarthome.lighting.Lighting.LightControlCommand getDefaultInstanceForType() {
        return smarthome.lighting.Lighting.LightControlCommand.getDefaultInstance();
      }

      @java.lang.Override
      public smarthome.lighting.Lighting.LightControlCommand build() {
        smarthome.lighting.Lighting.LightControlCommand result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public smarthome.lighting.Lighting.LightControlCommand buildPartial() {
        smarthome.lighting.Lighting.LightControlCommand result = new smarthome.lighting.Lighting.LightControlCommand(this);
        if (deviceBuilder_ == null) {
          result.device_ = device_;
        } else {
          result.device_ = deviceBuilder_.build();
        }
        if (authBuilder_ == null) {
          result.auth_ = auth_;
        } else {
          result.auth_ = authBuilder_.build();
        }
        if (commandCase_ == 3) {
          result.command_ = command_;
        }
        if (commandCase_ == 4) {
          result.command_ = command_;
        }
        result.commandCase_ = commandCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof smarthome.lighting.Lighting.LightControlCommand) {
          return mergeFrom((smarthome.lighting.Lighting.LightControlCommand)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(smarthome.lighting.Lighting.LightControlCommand other) {
        if (other == smarthome.lighting.Lighting.LightControlCommand.getDefaultInstance()) return this;
        if (other.hasDevice()) {
          mergeDevice(other.getDevice());
        }
        if (other.hasAuth()) {
          mergeAuth(other.getAuth());
        }
        switch (other.getCommandCase()) {
          case TOGGLE: {
            setToggle(other.getToggle());
            break;
          }
          case SET_BRIGHTNESS: {
            setSetBrightness(other.getSetBrightness());
            break;
          }
          case COMMAND_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        smarthome.lighting.Lighting.LightControlCommand parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (smarthome.lighting.Lighting.LightControlCommand) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int commandCase_ = 0;
      private java.lang.Object command_;
      public CommandCase
          getCommandCase() {
        return CommandCase.forNumber(
            commandCase_);
      }

      public Builder clearCommand() {
        commandCase_ = 0;
        command_ = null;
        onChanged();
        return this;
      }


      private smarthome.common.Common.Device device_;
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Device, smarthome.common.Common.Device.Builder, smarthome.common.Common.DeviceOrBuilder> deviceBuilder_;
      /**
       * <pre>
       * Target device
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       * @return Whether the device field is set.
       */
      public boolean hasDevice() {
        return deviceBuilder_ != null || device_ != null;
      }
      /**
       * <pre>
       * Target device
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       * @return The device.
       */
      public smarthome.common.Common.Device getDevice() {
        if (deviceBuilder_ == null) {
          return device_ == null ? smarthome.common.Common.Device.getDefaultInstance() : device_;
        } else {
          return deviceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Target device
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder setDevice(smarthome.common.Common.Device value) {
        if (deviceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          device_ = value;
          onChanged();
        } else {
          deviceBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Target device
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder setDevice(
          smarthome.common.Common.Device.Builder builderForValue) {
        if (deviceBuilder_ == null) {
          device_ = builderForValue.build();
          onChanged();
        } else {
          deviceBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Target device
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder mergeDevice(smarthome.common.Common.Device value) {
        if (deviceBuilder_ == null) {
          if (device_ != null) {
            device_ =
              smarthome.common.Common.Device.newBuilder(device_).mergeFrom(value).buildPartial();
          } else {
            device_ = value;
          }
          onChanged();
        } else {
          deviceBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Target device
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public Builder clearDevice() {
        if (deviceBuilder_ == null) {
          device_ = null;
          onChanged();
        } else {
          device_ = null;
          deviceBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Target device
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public smarthome.common.Common.Device.Builder getDeviceBuilder() {
        
        onChanged();
        return getDeviceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Target device
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      public smarthome.common.Common.DeviceOrBuilder getDeviceOrBuilder() {
        if (deviceBuilder_ != null) {
          return deviceBuilder_.getMessageOrBuilder();
        } else {
          return device_ == null ?
              smarthome.common.Common.Device.getDefaultInstance() : device_;
        }
      }
      /**
       * <pre>
       * Target device
       * </pre>
       *
       * <code>.smarthome.common.Device device = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Device, smarthome.common.Common.Device.Builder, smarthome.common.Common.DeviceOrBuilder> 
          getDeviceFieldBuilder() {
        if (deviceBuilder_ == null) {
          deviceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              smarthome.common.Common.Device, smarthome.common.Common.Device.Builder, smarthome.common.Common.DeviceOrBuilder>(
                  getDevice(),
                  getParentForChildren(),
                  isClean());
          device_ = null;
        }
        return deviceBuilder_;
      }

      private smarthome.common.Common.Auth auth_;
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Auth, smarthome.common.Common.Auth.Builder, smarthome.common.Common.AuthOrBuilder> authBuilder_;
      /**
       * <pre>
       * Authentication credentials
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       * @return Whether the auth field is set.
       */
      public boolean hasAuth() {
        return authBuilder_ != null || auth_ != null;
      }
      /**
       * <pre>
       * Authentication credentials
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       * @return The auth.
       */
      public smarthome.common.Common.Auth getAuth() {
        if (authBuilder_ == null) {
          return auth_ == null ? smarthome.common.Common.Auth.getDefaultInstance() : auth_;
        } else {
          return authBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Authentication credentials
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public Builder setAuth(smarthome.common.Common.Auth value) {
        if (authBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          auth_ = value;
          onChanged();
        } else {
          authBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Authentication credentials
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public Builder setAuth(
          smarthome.common.Common.Auth.Builder builderForValue) {
        if (authBuilder_ == null) {
          auth_ = builderForValue.build();
          onChanged();
        } else {
          authBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Authentication credentials
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public Builder mergeAuth(smarthome.common.Common.Auth value) {
        if (authBuilder_ == null) {
          if (auth_ != null) {
            auth_ =
              smarthome.common.Common.Auth.newBuilder(auth_).mergeFrom(value).buildPartial();
          } else {
            auth_ = value;
          }
          onChanged();
        } else {
          authBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Authentication credentials
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public Builder clearAuth() {
        if (authBuilder_ == null) {
          auth_ = null;
          onChanged();
        } else {
          auth_ = null;
          authBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Authentication credentials
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public smarthome.common.Common.Auth.Builder getAuthBuilder() {
        
        onChanged();
        return getAuthFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Authentication credentials
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      public smarthome.common.Common.AuthOrBuilder getAuthOrBuilder() {
        if (authBuilder_ != null) {
          return authBuilder_.getMessageOrBuilder();
        } else {
          return auth_ == null ?
              smarthome.common.Common.Auth.getDefaultInstance() : auth_;
        }
      }
      /**
       * <pre>
       * Authentication credentials
       * </pre>
       *
       * <code>.smarthome.common.Auth auth = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          smarthome.common.Common.Auth, smarthome.common.Common.Auth.Builder, smarthome.common.Common.AuthOrBuilder> 
          getAuthFieldBuilder() {
        if (authBuilder_ == null) {
          authBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              smarthome.common.Common.Auth, smarthome.common.Common.Auth.Builder, smarthome.common.Common.AuthOrBuilder>(
                  getAuth(),
                  getParentForChildren(),
                  isClean());
          auth_ = null;
        }
        return authBuilder_;
      }

      /**
       * <pre>
       * ON/OFF command
       * </pre>
       *
       * <code>bool toggle = 3;</code>
       * @return Whether the toggle field is set.
       */
      public boolean hasToggle() {
        return commandCase_ == 3;
      }
      /**
       * <pre>
       * ON/OFF command
       * </pre>
       *
       * <code>bool toggle = 3;</code>
       * @return The toggle.
       */
      public boolean getToggle() {
        if (commandCase_ == 3) {
          return (java.lang.Boolean) command_;
        }
        return false;
      }
      /**
       * <pre>
       * ON/OFF command
       * </pre>
       *
       * <code>bool toggle = 3;</code>
       * @param value The toggle to set.
       * @return This builder for chaining.
       */
      public Builder setToggle(boolean value) {
        commandCase_ = 3;
        command_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ON/OFF command
       * </pre>
       *
       * <code>bool toggle = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearToggle() {
        if (commandCase_ == 3) {
          commandCase_ = 0;
          command_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Brightness level command
       * </pre>
       *
       * <code>int32 set_brightness = 4;</code>
       * @return Whether the setBrightness field is set.
       */
      public boolean hasSetBrightness() {
        return commandCase_ == 4;
      }
      /**
       * <pre>
       * Brightness level command
       * </pre>
       *
       * <code>int32 set_brightness = 4;</code>
       * @return The setBrightness.
       */
      public int getSetBrightness() {
        if (commandCase_ == 4) {
          return (java.lang.Integer) command_;
        }
        return 0;
      }
      /**
       * <pre>
       * Brightness level command
       * </pre>
       *
       * <code>int32 set_brightness = 4;</code>
       * @param value The setBrightness to set.
       * @return This builder for chaining.
       */
      public Builder setSetBrightness(int value) {
        commandCase_ = 4;
        command_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Brightness level command
       * </pre>
       *
       * <code>int32 set_brightness = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearSetBrightness() {
        if (commandCase_ == 4) {
          commandCase_ = 0;
          command_ = null;
          onChanged();
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:smarthome.lighting.LightControlCommand)
    }

    // @@protoc_insertion_point(class_scope:smarthome.lighting.LightControlCommand)
    private static final smarthome.lighting.Lighting.LightControlCommand DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new smarthome.lighting.Lighting.LightControlCommand();
    }

    public static smarthome.lighting.Lighting.LightControlCommand getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LightControlCommand>
        PARSER = new com.google.protobuf.AbstractParser<LightControlCommand>() {
      @java.lang.Override
      public LightControlCommand parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LightControlCommand(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<LightControlCommand> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LightControlCommand> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public smarthome.lighting.Lighting.LightControlCommand getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_smarthome_lighting_ToggleRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_smarthome_lighting_ToggleRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_smarthome_lighting_BrightnessRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_smarthome_lighting_BrightnessRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_smarthome_lighting_LightStreamRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_smarthome_lighting_LightStreamRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_smarthome_lighting_LightStatus_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_smarthome_lighting_LightStatus_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_smarthome_lighting_LightControlCommand_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_smarthome_lighting_LightControlCommand_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\016lighting.proto\022\022smarthome.lighting\032\014co" +
      "mmon.proto\"k\n\rToggleRequest\022(\n\006device\030\001 " +
      "\001(\0132\030.smarthome.common.Device\022\n\n\002on\030\002 \001(" +
      "\010\022$\n\004auth\030\003 \001(\0132\026.smarthome.common.Auth\"" +
      "t\n\021BrightnessRequest\022(\n\006device\030\001 \001(\0132\030.s" +
      "marthome.common.Device\022\017\n\007percent\030\002 \001(\005\022" +
      "$\n\004auth\030\003 \001(\0132\026.smarthome.common.Auth\"\205\001" +
      "\n\022LightStreamRequest\022(\n\006device\030\001 \001(\0132\030.s" +
      "marthome.common.Device\022$\n\004auth\030\002 \001(\0132\026.s" +
      "marthome.common.Auth\022\037\n\027update_interval_" +
      "seconds\030\003 \001(\005\"C\n\013LightStatus\022\r\n\005is_on\030\001 " +
      "\001(\010\022\022\n\nbrightness\030\002 \001(\005\022\021\n\ttimestamp\030\003 \001" +
      "(\003\"\234\001\n\023LightControlCommand\022(\n\006device\030\001 \001" +
      "(\0132\030.smarthome.common.Device\022$\n\004auth\030\002 \001" +
      "(\0132\026.smarthome.common.Auth\022\020\n\006toggle\030\003 \001" +
      "(\010H\000\022\030\n\016set_brightness\030\004 \001(\005H\000B\t\n\007comman" +
      "d2\201\003\n\017LightingService\022R\n\013ToggleLight\022!.s" +
      "marthome.lighting.ToggleRequest\032 .smarth" +
      "ome.common.StatusResponse\022X\n\rSetBrightne" +
      "ss\022%.smarthome.lighting.BrightnessReques" +
      "t\032 .smarthome.common.StatusResponse\022^\n\021S" +
      "treamLightStatus\022&.smarthome.lighting.Li" +
      "ghtStreamRequest\032\037.smarthome.lighting.Li" +
      "ghtStatus0\001\022`\n\021BatchLightControl\022\'.smart" +
      "home.lighting.LightControlCommand\032 .smar" +
      "thome.common.StatusResponse(\001b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          smarthome.common.Common.getDescriptor(),
        });
    internal_static_smarthome_lighting_ToggleRequest_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_smarthome_lighting_ToggleRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_smarthome_lighting_ToggleRequest_descriptor,
        new java.lang.String[] { "Device", "On", "Auth", });
    internal_static_smarthome_lighting_BrightnessRequest_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_smarthome_lighting_BrightnessRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_smarthome_lighting_BrightnessRequest_descriptor,
        new java.lang.String[] { "Device", "Percent", "Auth", });
    internal_static_smarthome_lighting_LightStreamRequest_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_smarthome_lighting_LightStreamRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_smarthome_lighting_LightStreamRequest_descriptor,
        new java.lang.String[] { "Device", "Auth", "UpdateIntervalSeconds", });
    internal_static_smarthome_lighting_LightStatus_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_smarthome_lighting_LightStatus_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_smarthome_lighting_LightStatus_descriptor,
        new java.lang.String[] { "IsOn", "Brightness", "Timestamp", });
    internal_static_smarthome_lighting_LightControlCommand_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_smarthome_lighting_LightControlCommand_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_smarthome_lighting_LightControlCommand_descriptor,
        new java.lang.String[] { "Device", "Auth", "Toggle", "SetBrightness", "Command", });
    smarthome.common.Common.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
